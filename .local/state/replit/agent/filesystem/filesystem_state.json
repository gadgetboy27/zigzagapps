{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack portfolio and app marketplace application for Henry Peti, a software engineer and entrepreneur. The application serves as both a personal portfolio website and a premium app store where users can browse, purchase, and access Henry's software applications. Built with modern web technologies, it features a React frontend with a brutalist design aesthetic, an Express.js backend API, and PostgreSQL database integration.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety\n- **Build Tool**: Vite for fast development and optimized production builds\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent, accessible design\n- **Styling**: Tailwind CSS with custom CSS variables for theming and brutalist design elements\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod for validation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript for type safety across the stack\n- **API Design**: RESTful API with organized route handlers\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL with Neon serverless hosting\n- **Development**: Hot reload with tsx for TypeScript execution\n\n## Data Storage Solutions\n- **Primary Database**: PostgreSQL hosted on Neon with connection pooling\n- **Schema Management**: Drizzle migrations for version-controlled database changes\n- **Data Models**: Apps, testimonials, contact submissions, and purchases with proper relationships\n- **File Storage**: External image hosting (Unsplash URLs for demo content)\n\n## Payment Processing\n- **Payment Gateway**: Stripe integration for secure payment processing\n- **Implementation**: Stripe Elements for frontend payment forms with server-side confirmation\n- **Purchase Flow**: Payment intent creation, customer information collection, and purchase record storage\n\n## Authentication and Authorization\n- **Current State**: No authentication system implemented\n- **Session Management**: Express sessions configured but not actively used\n- **Security**: Basic CORS and request validation\n\n## External Dependencies\n\n### Third-Party Services\n- **Neon Database**: Serverless PostgreSQL hosting with WebSocket support\n- **Stripe**: Payment processing with React Stripe.js integration\n- **Font Services**: Google Fonts for typography (Inter, JetBrains Mono)\n- **Icon Library**: Font Awesome for iconography\n\n### Development Tools\n- **Replit Integration**: Custom Vite plugins for Replit development environment\n- **Error Handling**: Runtime error overlay for development\n- **Code Quality**: TypeScript strict mode with comprehensive type checking\n\n### UI and Styling\n- **Component System**: Extensive Radix UI component library for accessibility\n- **Design System**: shadcn/ui components with customizable variants\n- **Animation**: CSS transitions and custom animations for brutalist design effects\n- **Responsive Design**: Mobile-first approach with Tailwind responsive utilities\n\n### Build and Deployment\n- **Bundle Optimization**: ESBuild for server-side bundling\n- **Asset Management**: Vite asset handling with path resolution\n- **Environment Configuration**: Environment variables for database and API keys\n- **Production Build**: Optimized client and server builds for deployment\n\n## Database Synchronization System\n\n### Overview\nAutomated database synchronization system for safely syncing development database content to production. The system includes backup and sync scripts with safety features to prevent data loss.\n\n### Scripts Location\n- `scripts/backup-db.ts` - Creates JSON backups of production database tables\n- `scripts/sync-db.ts` - Syncs development database content to production with safety features\n\n### Environment Variables Required\n- `DATABASE_URL` - Current development database connection (already configured)\n- `DEV_DATABASE_URL` - Development database URL (optional, defaults to DATABASE_URL)  \n- `PROD_DATABASE_URL` - Production database URL (required for sync operations)\n\n### NPM Scripts to Add\nAdd these scripts to package.json (manual addition required due to configuration protection):\n```json\n{\n  \"scripts\": {\n    \"backup-db\": \"tsx scripts/backup-db.ts\",\n    \"sync-db\": \"tsx scripts/sync-db.ts --replace\",\n    \"sync-db:dry\": \"tsx scripts/sync-db.ts --dry-run --replace --verbose\"\n  }\n}\n```\n\n### Key Features\n- **Safe Upsert Strategy**: Uses business keys (apps.name, testimonials.name+content hash)\n- **Transaction Safety**: All operations wrapped in database transactions\n- **Automatic Backups**: Creates JSON backups before sync operations\n- **Dry-Run Mode**: Preview changes without executing them\n- **Replace Mode**: Handles deleted records with soft delete (isActive=false)\n- **Content-Only**: Never touches transactional data (purchases table)\n- **Clear Logging**: Comprehensive logging of all changes made\n\n### Usage Examples\n```bash\n# Backup production database\nnpm run backup-db\n\n# Dry run sync (show planned changes)\nnpm run sync-db:dry\n\n# Execute sync with replace mode\nnpm run sync-db\n\n# Custom backup options\ntsx scripts/backup-db.ts --tables apps --output ./my-backups\n\n# Custom sync options  \ntsx scripts/sync-db.ts --dry-run --verbose\n```\n\n### Business Keys\n- **Apps**: Uses `name` field as unique business identifier\n- **Testimonials**: Uses combination of `name` + content hash for uniqueness\n- **Purchases**: Never modified by sync system (transactional integrity)","size_bytes":5711},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        float: {\n          \"0%, 100%\": { \n            transform: \"translateY(0px) rotate(0deg)\" \n          },\n          \"50%\": { \n            transform: \"translateY(-20px) rotate(180deg)\" \n          },\n        },\n        \"bounce-slow\": {\n          \"0%, 100%\": {\n            transform: \"translateY(-25%)\",\n            animationTimingFunction: \"cubic-bezier(0.8, 0, 1, 1)\",\n          },\n          \"50%\": {\n            transform: \"translateY(0)\",\n            animationTimingFunction: \"cubic-bezier(0, 0, 0.2, 1)\",\n          },\n        },\n        \"pulse-slow\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.5\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"float\": \"float 6s ease-in-out infinite\",\n        \"bounce-slow\": \"bounce-slow 3s infinite\",\n        \"pulse-slow\": \"pulse-slow 4s infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3607},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    // Temporarily disabled to bypass preamble issue\n    // react({\n    //   jsxRuntime: 'automatic',\n    // }),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1071},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\n// Apply JSON parsing middleware conditionally - exclude Stripe webhook\napp.use((req, res, next) => {\n  if (req.path === '/api/webhook/stripe') {\n    next(); // Skip JSON parsing for Stripe webhook\n  } else {\n    express.json()(req, res, next);\n  }\n});\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2295},"server/routes.ts":{"content":"import type { Express, Request, Response } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport type { IncomingMessage, ServerResponse } from \"http\";\nimport Stripe from \"stripe\";\nimport express from \"express\";\nimport nodemailer from \"nodemailer\";\nimport rateLimit from \"express-rate-limit\";\nimport helmet from \"helmet\";\nimport validator from \"validator\";\nimport crypto from \"crypto\";\nimport { createProxyMiddleware, type Options } from \"http-proxy-middleware\";\nimport { storage } from \"./storage\";\nimport { insertContactSchema, insertPurchaseSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst stripe = process.env.STRIPE_SECRET_KEY \n  ? new Stripe(process.env.STRIPE_SECRET_KEY, {\n      apiVersion: \"2025-08-27.basil\",\n    })\n  : null;\n\n// Gmail transporter setup\nconst transporter = process.env.GMAIL_USER && process.env.GMAIL_APP_PASSWORD \n  ? nodemailer.createTransport({\n      service: 'gmail',\n      auth: {\n        user: process.env.GMAIL_USER,\n        pass: process.env.GMAIL_APP_PASSWORD,\n      },\n    })\n  : null;\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Configure trust proxy for rate limiting in production\n  app.set('trust proxy', 1);\n  \n  // CORS configuration for Netlify deployment\n  app.use((req, res, next) => {\n    const origin = req.headers.origin;\n    const allowedOrigins = [\n      'http://localhost:5173', // Vite dev server\n      'http://localhost:4173', // Vite preview\n      'http://localhost:5000', // Local production\n      'https://zigzagapps.net', // Production domain\n    ];\n    \n    // Add Netlify domains from environment variable\n    const netlifyDomains = process.env.ALLOWED_NETLIFY_ORIGINS?.split(',') || [];\n    allowedOrigins.push(...netlifyDomains);\n    \n    if (origin && allowedOrigins.includes(origin)) {\n      res.setHeader('Access-Control-Allow-Origin', origin);\n      res.setHeader('Access-Control-Allow-Credentials', 'true');\n    }\n    \n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');\n    \n    if (req.method === 'OPTIONS') {\n      res.status(200).end();\n      return;\n    }\n    \n    next();\n  });\n  \n  // Security middleware with CSP bypass for demo proxy routes\n  app.use('/api/demo-proxy', (req, res, next) => {\n    // Disable CSP for proxy routes to allow proxied content to load\n    res.setHeader('Content-Security-Policy', '');\n    res.setHeader('X-Content-Security-Policy', '');\n    res.setHeader('X-WebKit-CSP', '');\n    next();\n  });\n\n  app.use(helmet({\n    contentSecurityPolicy: {\n      directives: {\n        defaultSrc: [\"'self'\"],\n        styleSrc: [\"'self'\", \"'unsafe-inline'\", \"https://fonts.googleapis.com\", \"https://cdnjs.cloudflare.com\"],\n        fontSrc: [\"'self'\", \"https://fonts.gstatic.com\", \"https://cdnjs.cloudflare.com\"],\n        scriptSrc: [\"'self'\", \"https://js.stripe.com\", \"https://replit.com\"],\n        frameSrc: [\"'self'\", \"https://js.stripe.com\", \"https://hooks.stripe.com\"],\n        imgSrc: [\"'self'\", \"data:\", \"https:\", \"blob:\", \"https://images.unsplash.com\", \"https://cdn.pixabay.com\"],\n        mediaSrc: [\"'self'\", \"https:\", \"https://player.vimeo.com\", \"https://cdn.pixabay.com\"],\n        connectSrc: [\"'self'\", \"ws:\", \"wss:\", \"https:\", \"https://api.stripe.com\"],\n        objectSrc: [\"'none'\"],\n        baseUri: [\"'self'\"],\n      },\n    },\n  }));\n\n  // Rate limiting for contact form\n  const contactLimiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 5, // Limit each IP to 5 contact form submissions per windowMs\n    message: {\n      error: \"Too many contact form submissions, please try again later.\"\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n  });\n\n  // Rate limiting for demo access\n  const demoAccessLimiter = rateLimit({\n    windowMs: 24 * 60 * 60 * 1000, // 24 hours\n    max: 10, // Limit each IP to 10 demo access requests per day\n    message: {\n      error: \"Too many demo requests today, please try again later.\"\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n  });\n\n  // Health check endpoint (no rate limiting) - Handle BEFORE rate limiter\n  app.head('/api', (req, res) => {\n    res.status(200).end();\n  });\n\n  // General API rate limiter \n  const apiLimiter = rateLimit({\n    windowMs: 15 * 60 * 1000, // 15 minutes\n    max: 1000, // Increased limit for general API calls\n    message: {\n      error: \"Too many requests, please try again later.\"\n    },\n    standardHeaders: true,\n    legacyHeaders: false,\n  });\n\n  // Apply rate limiting to all API routes EXCEPT health check\n  app.use('/api/', (req, res, next) => {\n    // Skip rate limiting for HEAD requests to /api\n    if (req.method === 'HEAD' && req.path === '/api') {\n      return next();\n    }\n    // Apply rate limiting to all other API routes\n    apiLimiter(req, res, next);\n  });\n  \n  // Get all apps\n  app.get(\"/api/apps\", async (req, res) => {\n    try {\n      const { category } = req.query;\n      const apps = category && typeof category === 'string' \n        ? await storage.getAppsByCategory(category)\n        : await storage.getApps();\n      res.json(apps);\n    } catch (error) {\n      console.error(\"Error fetching apps:\", error);\n      res.status(500).json({ message: \"Failed to fetch apps\" });\n    }\n  });\n\n  // Get single app\n  app.get(\"/api/apps/:id\", async (req, res) => {\n    try {\n      const app = await storage.getApp(req.params.id);\n      if (!app) {\n        return res.status(404).json({ message: \"App not found\" });\n      }\n      res.json(app);\n    } catch (error) {\n      console.error(\"Error fetching app:\", error);\n      res.status(500).json({ message: \"Failed to fetch app\" });\n    }\n  });\n\n  // Generate demo access token\n  app.post(\"/api/demo-access/:appId\", demoAccessLimiter, async (req, res) => {\n    try {\n      const { appId } = req.params;\n      const ipAddress = req.ip || req.connection.remoteAddress || \"unknown\";\n      const userAgent = req.get(\"User-Agent\") || \"\";\n\n      // Check if app exists and has demo URL\n      const app = await storage.getApp(appId);\n      if (!app) {\n        return res.status(404).json({ message: \"App not found\" });\n      }\n\n      if (!app.demoUrl) {\n        return res.status(400).json({ message: \"Demo not available for this app\" });\n      }\n\n      // Check daily session limit (max 2 per IP per app per day)\n      const dailySessionCount = await storage.getDemoSessionsCountByIpAndAppToday(ipAddress, appId);\n      if (dailySessionCount >= 2) {\n        return res.status(429).json({ \n          message: \"Daily demo limit reached. Purchase the app for unlimited access.\",\n          requiresPurchase: true,\n          app: {\n            id: app.id,\n            name: app.name,\n            price: app.price\n          }\n        });\n      }\n\n      // Check active session limit (max 2 active sessions per IP per app)\n      const activeSessionCount = await storage.getActiveDemoSessionsCountByIpAndApp(ipAddress, appId);\n      if (activeSessionCount >= 2) {\n        return res.status(429).json({ \n          message: \"Too many active demo sessions. Wait for existing sessions to expire or purchase the app.\",\n          requiresPurchase: true,\n          app: {\n            id: app.id,\n            name: app.name,\n            price: app.price\n          }\n        });\n      }\n\n      // Generate secure session token\n      const sessionToken = crypto.randomBytes(32).toString(\"hex\");\n\n      // Create demo session (10 minutes duration)\n      const startTime = new Date();\n      const endTime = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes\n\n      const demoSession = await storage.createDemoSession({\n        appId,\n        sessionToken,\n        ipAddress,\n        userAgent,\n        startTime,\n        endTime,\n        isActive: true\n      });\n\n      // Cleanup expired sessions\n      await storage.cleanupExpiredDemoSessions();\n\n      res.json({ \n        success: true,\n        sessionToken,\n        expiresAt: endTime.toISOString(),\n        durationMinutes: 10,\n        message: \"Demo access granted. Session expires in 10 minutes.\"\n      });\n    } catch (error) {\n      console.error(\"Error creating demo session:\", error);\n      res.status(500).json({ message: \"Failed to create demo session\" });\n    }\n  });\n\n  // Secure demo proxy with token validation on every request\n  app.use(\"/api/demo-proxy/:token/*?\", async (req, res, next) => {\n    try {\n      const { token } = req.params;\n      const targetPath = (req.params as any)['0'] || '';\n\n      // Validate demo session with IP/UA binding on every request\n      const clientIP = req.ip || req.connection.remoteAddress || \"unknown\";\n      const userAgent = req.get(\"User-Agent\") || \"\";\n      const validation = await storage.validateDemoSession(token, clientIP, userAgent);\n      \n      if (!validation.valid || !validation.session || !validation.app) {\n        // Handle different validation failure scenarios\n        if (validation.error === 'IP address mismatch - session cannot be shared') {\n          return res.status(403).json({ \n            message: validation.error,\n            securityViolation: true,\n            requiresPurchase: true,\n            app: validation.app ? {\n              id: validation.app.id,\n              name: validation.app.name,\n              price: validation.app.price\n            } : undefined\n          });\n        }\n        \n        if (validation.error === 'Session security violation - please request a new demo') {\n          return res.status(403).json({ \n            message: validation.error,\n            securityViolation: true\n          });\n        }\n        \n        // Session expired or invalid\n        if (validation.session && validation.app) {\n          return res.status(410).json({ \n            message: \"Demo session has expired. Purchase the app for unlimited access.\",\n            expired: true,\n            requiresPurchase: true,\n            app: {\n              id: validation.app.id,\n              name: validation.app.name,\n              price: validation.app.price\n            }\n          });\n        }\n        \n        return res.status(404).json({ message: \"Invalid demo session\" });\n      }\n\n      // Get the target demo URL\n      const demoUrl = validation.app.demoUrl!;\n      const targetUrl = new URL(demoUrl);\n      \n      // Create secure reverse proxy with comprehensive security and HTML rewriting\n      const proxyOptions: Options = {\n        target: targetUrl.origin,\n        changeOrigin: true,\n        secure: true,\n        followRedirects: true,\n        selfHandleResponse: true, // Critical: Handle response manually for proper URL rewriting\n        pathRewrite: (path: string) => {\n          // Extract the path after the token\n          const tokenPath = `/api/demo-proxy/${token}`;\n          const relativePath = path.replace(tokenPath, '') || '/';\n          return targetUrl.pathname + (relativePath === '/' ? '' : relativePath);\n        },\n        on: {\n          proxyReq: (proxyReq: any, req: IncomingMessage) => {\n            // Remove token from headers to prevent exposure\n            proxyReq.removeHeader('authorization');\n            proxyReq.removeHeader('x-demo-session');\n            \n            // Add security headers\n            proxyReq.setHeader('X-Forwarded-Proto', 'https');\n            proxyReq.setHeader('User-Agent', 'ZIGZAG-DEMO-PROXY/1.0');\n          },\n          proxyRes: (proxyRes: any, req: IncomingMessage, res: ServerResponse) => {\n            // Security: Remove/sanitize dangerous headers\n            delete proxyRes.headers['x-original-url'];\n            delete proxyRes.headers['x-forwarded-host'];\n            delete proxyRes.headers['x-forwarded-for'];\n            delete proxyRes.headers['set-cookie']; // Strip cookies to prevent security issues\n            \n            // Sanitize Location header to prevent URL leakage\n            if (proxyRes.headers.location) {\n              const location = proxyRes.headers.location;\n              if (location.startsWith(targetUrl.origin)) {\n                proxyRes.headers.location = location.replace(targetUrl.origin, `/api/demo-proxy/${token}`);\n              }\n            }\n            \n            // Disable caching on proxy responses\n            proxyRes.headers['cache-control'] = 'no-cache, no-store, must-revalidate';\n            proxyRes.headers['pragma'] = 'no-cache';\n            proxyRes.headers['expires'] = '0';\n            \n            // Add security headers\n            proxyRes.headers['X-Content-Type-Options'] = 'nosniff';\n            proxyRes.headers['X-Frame-Options'] = 'SAMEORIGIN';\n            proxyRes.headers['X-Robots-Tag'] = 'noindex, nofollow';\n            \n            // Set response status and headers explicitly\n            res.statusCode = proxyRes.statusCode || 200;\n            Object.keys(proxyRes.headers).forEach(key => {\n              res.setHeader(key, proxyRes.headers[key]!);\n            });\n            \n            // Buffer and process response content\n            let body = Buffer.alloc(0);\n            \n            proxyRes.on('data', (chunk: Buffer) => {\n              body = Buffer.concat([body, chunk]);\n            });\n            \n            proxyRes.on('end', () => {\n              let content = body;\n              const contentType = proxyRes.headers['content-type'] || '';\n              \n              // Comprehensive URL rewriting for HTML content\n              if (contentType.includes('text/html') || contentType.includes('application/javascript') || contentType.includes('text/css')) {\n                let bodyStr = content.toString('utf8');\n                \n                // Rewrite absolute URLs to use our proxy\n                const originRegex = new RegExp(targetUrl.origin.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'g');\n                bodyStr = bodyStr.replace(originRegex, `/api/demo-proxy/${token}`);\n                \n                // Rewrite protocol-relative URLs\n                const protocolRelativeRegex = new RegExp(`//${targetUrl.hostname}`, 'g');\n                bodyStr = bodyStr.replace(protocolRelativeRegex, `/api/demo-proxy/${token}`);\n                \n                // Rewrite root-relative URLs for same domain assets\n                if (contentType.includes('text/html')) {\n                  bodyStr = bodyStr.replace(/(?:src|href|action)=\"\\//g, `$&api/demo-proxy/${token}/`);\n                  bodyStr = bodyStr.replace(/(?:src|href|action)='\\//g, `$&api/demo-proxy/${token}/`);\n                }\n                \n                content = Buffer.from(bodyStr, 'utf8');\n              }\n              \n              // Set proper content length\n              res.setHeader('Content-Length', content.length);\n              res.end(content);\n            });\n          },\n          error: (err: any, req: IncomingMessage, res: any) => {\n            console.error('Proxy error:', err);\n            if (res && !res.headersSent && typeof res.status === 'function') {\n              res.status(502).json({ \n                message: 'Demo content temporarily unavailable',\n                error: 'proxy_error'\n              });\n            }\n          }\n        }\n      };\n      \n      const proxy = createProxyMiddleware(proxyOptions);\n\n      // Use the proxy\n      proxy(req, res, next);\n    } catch (error) {\n      console.error(\"Error in demo proxy:\", error);\n      res.status(500).json({ message: \"Failed to access demo content\" });\n    }\n  });\n\n  // Get testimonials\n  app.get(\"/api/testimonials\", async (req, res) => {\n    try {\n      const testimonials = await storage.getTestimonials();\n      res.json(testimonials);\n    } catch (error) {\n      console.error(\"Error fetching testimonials:\", error);\n      res.status(500).json({ message: \"Failed to fetch testimonials\" });\n    }\n  });\n\n  // Submit contact form with security measures\n  app.post(\"/api/contact\", contactLimiter, async (req, res) => {\n    try {\n      // Check for honeypot field (bot detection)\n      if (req.body.website || req.body.url) {\n        return res.status(400).json({ message: \"Invalid form submission\" });\n      }\n\n      // Enhanced validation with sanitization\n      const contactData = {\n        name: validator.escape(req.body.name || '').trim(),\n        email: validator.normalizeEmail(req.body.email || '') || '',\n        projectType: validator.escape(req.body.projectType || '').trim(),\n        budget: validator.escape(req.body.budget || '').trim(),\n        message: validator.escape(req.body.message || '').trim(),\n      };\n\n      // Additional validation\n      if (!contactData.name || contactData.name.length < 2 || contactData.name.length > 100) {\n        return res.status(400).json({ message: \"Name must be between 2 and 100 characters\" });\n      }\n      \n      if (!validator.isEmail(contactData.email)) {\n        return res.status(400).json({ message: \"Please provide a valid email address\" });\n      }\n      \n      if (!contactData.message || contactData.message.length < 10 || contactData.message.length > 2000) {\n        return res.status(400).json({ message: \"Message must be between 10 and 2000 characters\" });\n      }\n\n      // Parse with our schema for final validation\n      const validatedData = insertContactSchema.parse(contactData);\n      const contact = await storage.createContactSubmission(validatedData);\n      \n      // Send email notification via Gmail\n      if (transporter) {\n        try {\n          await transporter.sendMail({\n            from: process.env.GMAIL_USER,\n            to: process.env.GMAIL_USER, // Send to yourself\n            subject: `New Contact Form Submission - ${contact.projectType || 'General Inquiry'}`,\n            html: `\n              <h2>New Contact Form Submission</h2>\n              <p><strong>Name:</strong> ${contact.name}</p>\n              <p><strong>Email:</strong> ${contact.email}</p>\n              <p><strong>Project Type:</strong> ${contact.projectType || 'Not specified'}</p>\n              <p><strong>Budget:</strong> ${contact.budget || 'Not specified'}</p>\n              <p><strong>Message:</strong></p>\n              <div style=\"background: #f5f5f5; padding: 15px; border-left: 4px solid #007acc; margin: 15px 0;\">\n                ${contact.message.replace(/\\n/g, '<br>')}\n              </div>\n              <p><strong>Submitted:</strong> ${new Date(contact.createdAt || new Date()).toLocaleString()}</p>\n              <hr>\n              <p style=\"color: #666; font-size: 12px;\">\n                This email was sent from your ZIGZAG APPS portfolio contact form.\n              </p>\n            `,\n          });\n        } catch (emailError) {\n          console.error(\"Failed to send contact notification email:\", emailError);\n          // Don't fail the request if email fails\n        }\n      }\n      \n      res.json({ message: \"Contact form submitted successfully\" });\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid form data\", errors: error.errors });\n      }\n      console.error(\"Error submitting contact form:\", error);\n      res.status(500).json({ message: \"Failed to submit contact form\" });\n    }\n  });\n\n  // Create payment intent for app purchase\n  app.post(\"/api/create-payment-intent\", async (req, res) => {\n    try {\n      if (!stripe) {\n        return res.status(500).json({ message: \"Payment system not configured. Please contact support.\" });\n      }\n\n      const { appId, customerEmail, customerName } = req.body;\n      \n      if (!appId || !customerEmail) {\n        return res.status(400).json({ message: \"App ID and customer email are required\" });\n      }\n\n      const app = await storage.getApp(appId);\n      if (!app) {\n        return res.status(404).json({ message: \"App not found\" });\n      }\n\n      if (!app.price || !app.isPremium) {\n        return res.status(400).json({ message: \"App is not available for purchase\" });\n      }\n\n      const amount = Math.round(parseFloat(app.price) * 100); // Convert to cents\n\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount,\n        currency: \"usd\",\n        payment_method_types: ['card'],\n        metadata: {\n          appId,\n          appName: app.name,\n          customerEmail,\n          customerName: customerName || '',\n        },\n      });\n\n      // Create purchase record\n      await storage.createPurchase({\n        appId,\n        customerEmail,\n        customerName: customerName || null,\n        amount: app.price,\n        stripePaymentIntentId: paymentIntent.id,\n        status: \"pending\",\n      });\n\n      res.json({ \n        clientSecret: paymentIntent.client_secret,\n        paymentIntentId: paymentIntent.id \n      });\n    } catch (error: any) {\n      console.error(\"Error creating payment intent:\", error);\n      res.status(500).json({ message: \"Error creating payment intent: \" + error.message });\n    }\n  });\n\n  // Stripe webhook for payment completion\n  app.post(\"/api/webhook/stripe\", express.raw({ type: 'application/json' }), async (req, res) => {\n    if (!stripe) {\n      return res.status(500).json({ message: \"Payment system not configured\" });\n    }\n\n    const sig = req.headers['stripe-signature'];\n    let event;\n\n    try {\n      if (!process.env.STRIPE_WEBHOOK_SECRET) {\n        throw new Error(\"STRIPE_WEBHOOK_SECRET is not configured\");\n      }\n      \n      event = stripe.webhooks.constructEvent(req.body, sig as string, process.env.STRIPE_WEBHOOK_SECRET);\n    } catch (err: any) {\n      return res.status(400).send(`Webhook Error: ${err.message}`);\n    }\n\n    // Handle payment completion\n    if (event.type === 'payment_intent.succeeded') {\n      const paymentIntent = event.data.object as Stripe.PaymentIntent;\n      \n      try {\n        const purchase = await storage.getPurchaseByPaymentIntent(paymentIntent.id);\n        if (purchase) {\n          await storage.updatePurchaseStatus(purchase.id, \"completed\");\n          \n          // Get purchase with app details for confirmation email\n          const purchaseWithApp = await storage.getPurchaseWithApp(purchase.id);\n          if (purchaseWithApp && transporter) {\n            // Send purchase confirmation email\n            try {\n              const downloadUrl = `${process.env.PUBLIC_URL || 'https://your-domain.com'}/api/download/${purchase.id}`;\n              \n              await transporter.sendMail({\n                from: process.env.GMAIL_USER,\n                to: purchase.customerEmail,\n                subject: `Your ${purchaseWithApp.app.name} Purchase is Complete!`,\n                html: `\n                  <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;\">\n                    <h1 style=\"color: #007acc; text-align: center;\">Thank You for Your Purchase!</h1>\n                    \n                    <div style=\"background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                      <h2 style=\"color: #333; margin-top: 0;\">Purchase Details</h2>\n                      <p><strong>App:</strong> ${purchaseWithApp.app.name}</p>\n                      <p><strong>Amount:</strong> $${purchaseWithApp.amount}</p>\n                      <p><strong>Purchase Date:</strong> ${new Date().toLocaleDateString()}</p>\n                    </div>\n                    \n                    <div style=\"background: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #28a745;\">\n                      <h3 style=\"color: #155724; margin-top: 0;\">Access Your App</h3>\n                      <p style=\"color: #155724;\">Your app is ready for download! Click the secure link below:</p>\n                      <div style=\"text-align: center; margin: 20px 0;\">\n                        <a href=\"${downloadUrl}\" style=\"background: #007acc; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; display: inline-block; font-weight: bold;\">Download ${purchaseWithApp.app.name}</a>\n                      </div>\n                      <p style=\"color: #6c757d; font-size: 14px;\">This download link is secure and will remain valid for 30 days.</p>\n                    </div>\n                    \n                    ${purchaseWithApp.app.githubUrl ? `\n                    <div style=\"background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                      <h3 style=\"color: #333; margin-top: 0;\">Source Code Access</h3>\n                      <p>You also have access to the source code repository:</p>\n                      <p><a href=\"${purchaseWithApp.app.githubUrl}\" style=\"color: #007acc;\">${purchaseWithApp.app.githubUrl}</a></p>\n                    </div>\n                    ` : ''}\n                    \n                    <div style=\"background: #fff3cd; padding: 20px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #ffc107;\">\n                      <h3 style=\"color: #856404; margin-top: 0;\">Need Help?</h3>\n                      <p style=\"color: #856404;\">If you have any questions or need assistance with your purchase, please don't hesitate to reach out to us.</p>\n                    </div>\n                    \n                    <hr style=\"margin: 30px 0; border: none; border-top: 1px solid #dee2e6;\">\n                    <p style=\"color: #6c757d; font-size: 12px; text-align: center;\">\n                      This email was sent from ZIGZAG APPS. You received this because you purchased ${purchaseWithApp.app.name}.\n                    </p>\n                  </div>\n                `,\n              });\n              \n              console.log(`Purchase confirmation email sent to ${purchase.customerEmail}`);\n            } catch (emailError) {\n              console.error(\"Failed to send purchase confirmation email:\", emailError);\n            }\n          }\n        }\n      } catch (error) {\n        console.error(\"Error updating purchase status:\", error);\n      }\n    }\n\n    // Handle payment failures\n    if (event.type === 'payment_intent.payment_failed') {\n      const paymentIntent = event.data.object as Stripe.PaymentIntent;\n      \n      try {\n        const purchase = await storage.getPurchaseByPaymentIntent(paymentIntent.id);\n        if (purchase) {\n          await storage.updatePurchaseStatus(purchase.id, \"failed\");\n        }\n      } catch (error) {\n        console.error(\"Error updating failed purchase status:\", error);\n      }\n    }\n\n    res.json({ received: true });\n  });\n\n  // Create secure download endpoint for purchased apps\n  app.get(\"/api/download/:purchaseId\", async (req, res) => {\n    try {\n      const { purchaseId } = req.params;\n      \n      const purchaseWithApp = await storage.getPurchaseWithApp(purchaseId);\n      if (!purchaseWithApp) {\n        return res.status(404).json({ message: \"Purchase not found\" });\n      }\n      \n      if (purchaseWithApp.status !== \"completed\") {\n        return res.status(403).json({ message: \"Purchase not completed\" });\n      }\n      \n      // Check if download link is still valid (30 days)\n      const purchaseDate = new Date(purchaseWithApp.createdAt || '');\n      const thirtyDaysAgo = new Date();\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n      \n      if (purchaseDate < thirtyDaysAgo) {\n        return res.status(410).json({ message: \"Download link has expired. Please contact support.\" });\n      }\n      \n      // For demo purposes, redirect to GitHub or demo URL\n      // In a real app, you'd serve the actual downloadable file\n      const downloadUrl = purchaseWithApp.app.githubUrl || purchaseWithApp.app.demoUrl;\n      if (downloadUrl) {\n        res.redirect(downloadUrl);\n      } else {\n        res.json({\n          message: \"Download ready\",\n          app: {\n            name: purchaseWithApp.app.name,\n            description: purchaseWithApp.app.description,\n            githubUrl: purchaseWithApp.app.githubUrl,\n            demoUrl: purchaseWithApp.app.demoUrl\n          },\n          instructions: \"Please contact support for download instructions.\"\n        });\n      }\n    } catch (error) {\n      console.error(\"Error processing download request:\", error);\n      res.status(500).json({ message: \"Failed to process download request\" });\n    }\n  });\n\n  // TEMPORARY: Export data as JSON (use in development)\n  app.get(\"/api/export\", async (req, res) => {\n    try {\n      const apps = await storage.getApps();\n      const testimonials = await storage.getTestimonials();\n      \n      res.json({\n        apps: apps,\n        testimonials: testimonials,\n        exportedAt: new Date().toISOString()\n      });\n    } catch (error: any) {\n      console.error(\"Error exporting data:\", error);\n      res.status(500).json({ error: \"Failed to export data: \" + error.message });\n    }\n  });\n\n  // TEMPORARY: Import JSON data (use in production)  \n  app.post(\"/api/import\", async (req, res) => {\n    try {\n      const { apps, testimonials = [] } = req.body;\n      \n      if (!apps || !Array.isArray(apps)) {\n        return res.status(400).json({ error: \"Missing or invalid apps data\" });\n      }\n\n      console.log(`Importing ${apps.length} apps and ${testimonials.length} testimonials...`);\n      \n      let importedApps = 0;\n      let importedTestimonials = 0;\n      \n      // Import apps\n      for (const app of apps) {\n        try {\n          // Remove database-specific fields\n          const { id, createdAt, updatedAt, created_at, updated_at, ...appData } = app;\n          \n          // Convert snake_case to camelCase for the schema\n          const cleanAppData = {\n            name: appData.name,\n            description: appData.description,\n            longDescription: appData.long_description || appData.longDescription,\n            price: appData.price,\n            category: appData.category,\n            imageUrl: appData.image_url || appData.imageUrl,\n            demoUrl: appData.demo_url || appData.demoUrl,\n            githubUrl: appData.github_url || appData.githubUrl,\n            technologies: appData.technologies || [],\n            features: appData.features || [],\n            isPremium: appData.is_premium ?? appData.isPremium ?? false,\n            isActive: appData.is_active ?? appData.isActive ?? true\n          };\n          \n          await storage.createApp(cleanAppData);\n          importedApps++;\n        } catch (appError) {\n          console.error(`Error importing app ${app.name}:`, appError);\n        }\n      }\n      \n      // Import testimonials\n      for (const testimonial of testimonials) {\n        try {\n          const { id, createdAt, created_at, ...testimonialData } = testimonial;\n          await storage.createTestimonial(testimonialData);\n          importedTestimonials++;\n        } catch (testimonialError) {\n          console.error(`Error importing testimonial:`, testimonialError);\n        }\n      }\n      \n      res.json({ \n        success: true, \n        message: `Successfully imported ${importedApps} apps and ${importedTestimonials} testimonials`,\n        timestamp: new Date().toISOString()\n      });\n    } catch (error: any) {\n      console.error(\"Error importing data:\", error);\n      res.status(500).json({ \n        success: false, \n        error: \"Failed to import data: \" + error.message \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":31163},"server/storage.ts":{"content":"import { \n  apps, \n  testimonials, \n  contactSubmissions, \n  purchases,\n  demoSessions,\n  type App, \n  type InsertApp,\n  type Testimonial,\n  type InsertTestimonial,\n  type ContactSubmission,\n  type InsertContact,\n  type Purchase,\n  type InsertPurchase,\n  type DemoSession,\n  type InsertDemoSession\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, lt, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Apps\n  getApps(): Promise<App[]>;\n  getAppsByCategory(category: string): Promise<App[]>;\n  getApp(id: string): Promise<App | undefined>;\n  createApp(app: InsertApp): Promise<App>;\n  \n  // Testimonials\n  getTestimonials(): Promise<Testimonial[]>;\n  createTestimonial(testimonial: InsertTestimonial): Promise<Testimonial>;\n  \n  // Contact\n  createContactSubmission(contact: InsertContact): Promise<ContactSubmission>;\n  \n  // Purchases\n  createPurchase(purchase: InsertPurchase): Promise<Purchase>;\n  getPurchaseByPaymentIntent(paymentIntentId: string): Promise<Purchase | undefined>;\n  updatePurchaseStatus(id: string, status: string): Promise<Purchase>;\n  getPurchaseWithApp(id: string): Promise<(Purchase & { app: App }) | undefined>;\n  \n  // Demo Sessions\n  createDemoSession(session: InsertDemoSession): Promise<DemoSession>;\n  getDemoSessionByToken(token: string): Promise<DemoSession | undefined>;\n  validateDemoSession(token: string, requestIp?: string, requestUserAgent?: string): Promise<{ valid: boolean; session?: DemoSession; app?: App; error?: string }>;\n  getActiveDemoSessionsCountByIpAndApp(ipAddress: string, appId: string): Promise<number>;\n  getDemoSessionsCountByIpAndAppToday(ipAddress: string, appId: string): Promise<number>;\n  deactivateDemoSession(id: string): Promise<void>;\n  cleanupExpiredDemoSessions(): Promise<number>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getApps(): Promise<App[]> {\n    return await db.select().from(apps).where(eq(apps.isActive, true)).orderBy(desc(apps.createdAt));\n  }\n\n  async getAppsByCategory(category: string): Promise<App[]> {\n    return await db.select().from(apps)\n      .where(eq(apps.category, category))\n      .orderBy(desc(apps.createdAt));\n  }\n\n  async getApp(id: string): Promise<App | undefined> {\n    const [app] = await db.select().from(apps).where(eq(apps.id, id));\n    return app;\n  }\n\n  async createApp(appData: InsertApp): Promise<App> {\n    const [app] = await db.insert(apps).values(appData as any).returning();\n    return app;\n  }\n\n  async getTestimonials(): Promise<Testimonial[]> {\n    return await db.select().from(testimonials)\n      .where(eq(testimonials.isActive, true))\n      .orderBy(desc(testimonials.createdAt));\n  }\n\n  async createTestimonial(testimonialData: InsertTestimonial): Promise<Testimonial> {\n    const [testimonial] = await db.insert(testimonials).values(testimonialData as any).returning();\n    return testimonial;\n  }\n\n  async createContactSubmission(contactData: InsertContact): Promise<ContactSubmission> {\n    const [contact] = await db.insert(contactSubmissions).values(contactData as any).returning();\n    return contact;\n  }\n\n  async createPurchase(purchaseData: InsertPurchase): Promise<Purchase> {\n    const [purchase] = await db.insert(purchases).values(purchaseData as any).returning();\n    return purchase;\n  }\n\n  async getPurchaseByPaymentIntent(paymentIntentId: string): Promise<Purchase | undefined> {\n    const [purchase] = await db.select().from(purchases)\n      .where(eq(purchases.stripePaymentIntentId, paymentIntentId));\n    return purchase;\n  }\n\n  async updatePurchaseStatus(id: string, status: string): Promise<Purchase> {\n    const [purchase] = await db.update(purchases)\n      .set({ status })\n      .where(eq(purchases.id, id))\n      .returning();\n    return purchase;\n  }\n\n  async getPurchaseWithApp(id: string): Promise<(Purchase & { app: App }) | undefined> {\n    const result = await db.select({\n      purchase: purchases,\n      app: apps\n    })\n    .from(purchases)\n    .innerJoin(apps, eq(purchases.appId, apps.id))\n    .where(eq(purchases.id, id));\n    \n    if (result.length === 0) return undefined;\n    \n    return {\n      ...result[0].purchase,\n      app: result[0].app\n    };\n  }\n\n  // Demo Sessions\n  async createDemoSession(sessionData: InsertDemoSession): Promise<DemoSession> {\n    const [session] = await db.insert(demoSessions).values(sessionData as any).returning();\n    return session;\n  }\n\n  async getDemoSessionByToken(token: string): Promise<DemoSession | undefined> {\n    const [session] = await db.select().from(demoSessions)\n      .where(eq(demoSessions.sessionToken, token));\n    return session;\n  }\n\n  async validateDemoSession(token: string, requestIp?: string, requestUserAgent?: string): Promise<{ valid: boolean; session?: DemoSession; app?: App; error?: string }> {\n    const result = await db.select({\n      session: demoSessions,\n      app: apps\n    })\n    .from(demoSessions)\n    .innerJoin(apps, eq(demoSessions.appId, apps.id))\n    .where(eq(demoSessions.sessionToken, token));\n\n    if (result.length === 0) {\n      return { valid: false, error: 'Session not found' };\n    }\n\n    const { session, app } = result[0];\n    const now = new Date();\n    const endTime = new Date(session.endTime);\n\n    // Check if session is active and not expired\n    if (!session.isActive || now > endTime) {\n      return { valid: false, session, app, error: 'Session expired' };\n    }\n\n    // Enhanced security: Check IP binding\n    if (requestIp && session.ipAddress !== requestIp) {\n      return { valid: false, session, app, error: 'IP address mismatch - session cannot be shared' };\n    }\n\n    // Optional: Check User-Agent binding for additional security\n    if (requestUserAgent && session.userAgent && session.userAgent !== requestUserAgent) {\n      return { valid: false, session, app, error: 'Session security violation - please request a new demo' };\n    }\n\n    return { valid: true, session, app };\n  }\n\n  async getActiveDemoSessionsCountByIpAndApp(ipAddress: string, appId: string): Promise<number> {\n    const now = new Date();\n    const [result] = await db.select({ count: count() })\n      .from(demoSessions)\n      .where(\n        and(\n          eq(demoSessions.ipAddress, ipAddress),\n          eq(demoSessions.appId, appId),\n          eq(demoSessions.isActive, true),\n          gte(demoSessions.endTime, now)\n        )\n      );\n    return result?.count || 0;\n  }\n\n  async getDemoSessionsCountByIpAndAppToday(ipAddress: string, appId: string): Promise<number> {\n    const startOfDay = new Date();\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date();\n    endOfDay.setHours(23, 59, 59, 999);\n\n    const [result] = await db.select({ count: count() })\n      .from(demoSessions)\n      .where(\n        and(\n          eq(demoSessions.ipAddress, ipAddress),\n          eq(demoSessions.appId, appId),\n          gte(demoSessions.createdAt, startOfDay),\n          lt(demoSessions.createdAt, endOfDay)\n        )\n      );\n    return result?.count || 0;\n  }\n\n  async deactivateDemoSession(id: string): Promise<void> {\n    await db.update(demoSessions)\n      .set({ isActive: false })\n      .where(eq(demoSessions.id, id));\n  }\n\n  async cleanupExpiredDemoSessions(): Promise<number> {\n    const now = new Date();\n    const result = await db.update(demoSessions)\n      .set({ isActive: false })\n      .where(\n        and(\n          eq(demoSessions.isActive, true),\n          lt(demoSessions.endTime, now)\n        )\n      )\n      .returning({ id: demoSessions.id });\n    \n    return result.length;\n  }\n}\n\n// DatabaseStorage disabled due to persistent Neon endpoint issue\n// export const storage = new DatabaseStorage();\n\n// Working MemStorage with proper demo session support\nclass MemStorage implements IStorage {\n  private demoSessions: DemoSession[] = [];\n  private apps: App[] = [\n    {\n      id: \"9aa868f3-75eb-4347-8c16-57d2db73a890\",\n      name: \"Harikoa Kainga\", \n      description: \"Revolutionary real estate platform transforming property discovery and management with cutting-edge technology.\",\n      longDescription: \"Harikoa Kainga represents the pinnacle of real estate technology innovation. This sophisticated platform revolutionizes how users discover, analyze, and manage properties through an intuitive interface powered by modern web technologies. Built with React 18, TypeScript, and Next.js for blazing-fast performance, the application leverages PostgreSQL for robust data management and integrates advanced APIs for real-time property data. The platform features responsive design principles, state-of-the-art UI/UX patterns, and scalable architecture designed for enterprise-level deployment. With comprehensive property analytics, automated workflows, and intelligent search capabilities, this solution delivers unparalleled value for real estate professionals and property investors. The codebase demonstrates expert-level software engineering practices, including type safety, component modularity, and performance optimization. This is not just an application—it's a complete real estate technology solution ready for immediate commercial deployment.\",\n      price: \"150000.00\",\n      category: \"web\",\n      imageUrl: \"https://images.unsplash.com/photo-1560520653-9e0e4c89eb11?auto=format&fit=crop&w=800&h=400\",\n      demoUrl: null,\n      githubUrl: null,\n      technologies: [\"React 18\",\"TypeScript\",\"Next.js\",\"PostgreSQL\",\"Node.js\",\"Express.js\",\"Tailwind CSS\",\"Drizzle ORM\",\"RESTful APIs\",\"Responsive Design\",\"Modern Web Architecture\"],\n      features: [\"Advanced Property Search\",\"Real-time Data Integration\",\"Interactive Property Analytics\",\"Responsive Mobile Design\",\"Enterprise-Grade Security\",\"Scalable Architecture\",\"Modern UI/UX Design\",\"API Integration Ready\",\"Database Optimization\",\"Professional Codebase\",\"Commercial Deployment Ready\",\"Complete Documentation\"],\n      isPremium: true,\n      isActive: true,\n      createdAt: new Date(\"2025-09-18T13:11:20.717Z\"),\n      updatedAt: new Date(\"2025-09-18T13:11:20.717Z\")\n    },\n    {\n      id: \"58a9d02e-bc18-4350-ae8f-2df3b743f44c\",\n      name: \"Asset Timer\",\n      description: \"Market timing dashboard for Gold, Bitcoin, stocks, and commodities\",\n      longDescription: \"A comprehensive market timing tool that tracks historical cycles for major asset classes including Gold, Bitcoin, S&P 500, real estate, and oil. Features real-time price data, cycle analysis, seasonal patterns, and strategic buy/sell signals based on historical market behavior.\",\n      price: \"49.99\",\n      category: \"web\",\n      imageUrl: \"https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?auto=format&fit=crop&w=800&h=400\",\n      demoUrl: \"https://asset-timer.replit.app\",\n      githubUrl: \"\",\n      technologies: [\"React\",\"TypeScript\",\"Financial APIs\",\"Chart.js\",\"Market Data\"],\n      features: [\"Real-time market data\",\"Historical cycle analysis\",\"Gold & Bitcoin timing\",\"Seasonal patterns\",\"Buy/sell signals\",\"Multi-asset tracking\",\"Investment calendar\",\"Risk assessment\"],\n      isPremium: true,\n      isActive: true,\n      createdAt: new Date(\"2025-09-16T04:04:23.083Z\"),\n      updatedAt: new Date(\"2025-09-18T18:59:55.286Z\")\n    },\n    {\n      id: \"0d2456ca-3c8a-43cc-b8e8-587ec0755cb5\",\n      name: \"www.electrifiedgarage.net\",\n      description: \"E-commerce platform for the latest tech gadgets and accessories\",\n      longDescription: \"A modern e-commerce application built for tech enthusiasts to discover and purchase the latest gadgets, electronics, and accessories. Features product catalog browsing, shopping cart functionality, secure payment processing, and user reviews.\",\n      price: null,\n      category: \"web\",\n      imageUrl: \"https://images.unsplash.com/photo-1441986300917-64674bd600d8?auto=format&fit=crop&w=800&h=400\",\n      demoUrl: \"https://electrifiedgarage.net\",\n      githubUrl: \"https://github.com/gadgetboy27/GadgetStore\",\n      technologies: [\"React\",\"TypeScript\",\"E-commerce\",\"Payment Processing\",\"Database\"],\n      features: [\"Product catalog\",\"Shopping cart\",\"User authentication\",\"Payment integration\",\"Product reviews\",\"Inventory management\",\"Order tracking\",\"Mobile responsive\"],\n      isPremium: false,\n      isActive: true,\n      createdAt: new Date(\"2025-09-16T04:00:00.000Z\"),\n      updatedAt: new Date(\"2025-09-18T18:59:55.477Z\")\n    },\n    {\n      id: \"7d7bd30c-97e8-44b3-a7aa-d6c90338b998\",\n      name: \"Stockmentor\",\n      description: \"High-performance S&P 500 stock screener with real-time analysis\",\n      longDescription: \"A comprehensive finance scanner built with Python and Streamlit that provides fast technical and fundamental analysis for S&P 500 stocks. Features parallel processing for analyzing up to 50 stocks simultaneously, AI-powered scoring, BUY/WAIT/SELL signals, and real-time data from Yahoo Finance APIs.\",\n      price: \"79.99\",\n      category: \"web\",\n      imageUrl: \"https://images.unsplash.com/photo-1590283603385-17ffb3a7f29f?auto=format&fit=crop&w=800&h=400\",\n      demoUrl: \"https://stock-compass-gadgetboy27.replit.app\",\n      githubUrl: \"\",\n      technologies: [\"Python\",\"Streamlit\",\"Yahoo Finance API\",\"Real-time Data\",\"ThreadPoolExecutor\"],\n      features: [\"V-Score valuation metrics\",\"Momentum indicators (RSI, MACD)\",\"Quality metrics (ROE, margins)\",\"Risk assessment\",\"AI-powered scoring\",\"Parallel processing\",\"Export to CSV\",\"Sector analysis\"],\n      isPremium: true,\n      isActive: true,\n      createdAt: new Date(\"2025-09-10T12:58:56.496Z\"),\n      updatedAt: new Date(\"2025-09-18T18:59:55.339Z\")\n    },\n    {\n      id: \"b5b06f6b-21ca-4e4d-a67c-a2923535855d\",\n      name: \"AI Stock Picker\",\n      description: \"AI-powered stock analysis and investment recommendation platform\",\n      longDescription: \"Advanced artificial intelligence platform that analyzes market trends, financial data, and trading patterns to provide intelligent stock picking recommendations. Features machine learning algorithms for predictive analysis and automated investment insights.\",\n      price: \"99.99\",\n      category: \"mobile\",\n      imageUrl: \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&h=400\",\n      demoUrl: \"https://mobile-invest-gadgetboy27.replit.app\",\n      githubUrl: \"\",\n      technologies: [\"AI/ML\",\"Python\",\"Real-time Data\",\"Predictive Analytics\",\"Mobile-First\"],\n      features: [\"AI stock analysis\",\"Market trend prediction\",\"Investment recommendations\",\"Risk assessment\",\"Portfolio optimization\",\"Real-time alerts\",\"Mobile responsive\"],\n      isPremium: true,\n      isActive: true,\n      createdAt: new Date(\"2025-09-10T12:58:56.496Z\"),\n      updatedAt: new Date(\"2025-09-18T18:59:55.385Z\")\n    },\n    {\n      id: \"5dbb9b07-c8b7-4a8b-b5be-88019be4f77c\",\n      name: \"Dev Tools Suite\",\n      description: \"Collection of developer productivity tools\",\n      longDescription: \"A comprehensive suite of tools for developers including JSON formatter, base64 encoder/decoder, regex tester, and color palette generator. All tools work offline.\",\n      price: null,\n      category: \"web\",\n      imageUrl: \"https://images.unsplash.com/photo-1555066931-4365d14bab8c?auto=format&fit=crop&w=800&h=400\",\n      demoUrl: \"https://devtools.henrypeti.dev\",\n      githubUrl: \"https://github.com/gadgetboy27/dev-tools-suite\",\n      technologies: [\"Vanilla JavaScript\",\"CSS3\",\"Web APIs\",\"Service Workers\"],\n      features: [\"JSON formatter\",\"Base64 encoder\",\"Regex tester\",\"Color tools\",\"Works offline\"],\n      isPremium: false,\n      isActive: true,\n      createdAt: new Date(\"2025-09-10T12:58:56.496Z\"),\n      updatedAt: new Date(\"2025-09-18T18:59:55.429Z\")\n    }\n  ];\n\n  private testimonials: Testimonial[] = [\n    {\n      id: \"1102baab-61d1-469a-b1ed-b728287d5556\",\n      name: \"Sarah Chen\",\n      role: \"Project Manager\",\n      company: \"TechFlow Inc.\",\n      content: \"Henry delivered an exceptional mobile app that exceeded our expectations. His attention to detail and technical expertise made our project a huge success!\",\n      imageUrl: \"https://images.unsplash.com/photo-1494790108755-2616b612b786?auto=format&fit=crop&w=200&h=200\",\n      isActive: true,\n      createdAt: new Date(\"2025-09-15T10:30:00.000Z\"),\n      updatedAt: new Date(\"2025-09-15T10:30:00.000Z\")\n    },\n    {\n      id: \"2203baab-71d1-469a-b1ed-b728287d5557\",\n      name: \"Marcus Rodriguez\", \n      role: \"CTO\",\n      company: \"StartupLab\",\n      content: \"Working with Henry was fantastic. He understood our complex requirements and delivered a robust solution on time and within budget.\",\n      imageUrl: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?auto=format&fit=crop&w=200&h=200\",\n      isActive: true,\n      createdAt: \"2025-09-14T15:45:00.000Z\",\n      updatedAt: \"2025-09-14T15:45:00.000Z\"\n    },\n    {\n      id: \"3304baab-81d1-469a-b1ed-b728287d5558\",\n      name: \"Emily Johnson\",\n      role: \"Creative Director\",\n      company: \"DesignCo\",\n      content: \"Henry's web development skills are outstanding. The portfolio website he built for us has significantly improved our client acquisition rate.\",\n      imageUrl: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?auto=format&fit=crop&w=200&h=200\",\n      isActive: true,\n      createdAt: \"2025-09-13T09:20:00.000Z\",\n      updatedAt: \"2025-09-13T09:20:00.000Z\"\n    },\n    {\n      id: \"4405baab-91d1-469a-b1ed-b728287d5559\",\n      name: \"David Kim\",\n      role: \"Lead Analyst\",\n      company: \"DataDriven Solutions\",\n      content: \"The analytics dashboard Henry built transformed how we visualize our data. Clean code, beautiful UI, and powerful functionality.\",\n      imageUrl: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?auto=format&fit=crop&w=200&h=200\",\n      isActive: true,\n      createdAt: \"2025-09-12T14:10:00.000Z\",\n      updatedAt: \"2025-09-12T14:10:00.000Z\"\n    },\n    {\n      id: \"5506baab-a1d1-469a-b1ed-b728287d5560\",\n      name: \"Lisa Thompson\",\n      role: \"Product Manager\",\n      company: \"EcoTech Ventures\",\n      content: \"Henry's project management app helped us streamline our entire workflow. The AI features are incredibly useful for planning and resource allocation.\",\n      imageUrl: \"https://images.unsplash.com/photo-1544725176-7c40e5a71c5e?auto=format&fit=crop&w=200&h=200\",\n      isActive: true,\n      createdAt: \"2025-09-11T11:55:00.000Z\",\n      updatedAt: \"2025-09-11T11:55:00.000Z\"\n    }\n  ];\n\n  // Apps methods\n  async getApps(): Promise<App[]> {\n    return this.apps.filter(app => app.isActive);\n  }\n\n  async getAppsByCategory(category: string): Promise<App[]> {\n    return this.apps.filter(app => app.category === category && app.isActive);\n  }\n\n  async getApp(id: string): Promise<App | undefined> {\n    return this.apps.find(app => app.id === id);\n  }\n\n  async createApp(appData: InsertApp): Promise<App> {\n    const app: App = {\n      id: crypto.randomUUID(),\n      ...appData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    } as App;\n    this.apps.push(app);\n    return app;\n  }\n\n  // Testimonials methods\n  async getTestimonials(): Promise<Testimonial[]> {\n    return this.testimonials.filter(t => t.isActive);\n  }\n\n  async createTestimonial(testimonialData: InsertTestimonial): Promise<Testimonial> {\n    const testimonial: Testimonial = {\n      id: crypto.randomUUID(),\n      ...testimonialData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    } as Testimonial;\n    this.testimonials.push(testimonial);\n    return testimonial;\n  }\n\n  // Minimal implementations for other methods (demo will be limited)\n  async createContactSubmission(contactData: InsertContact): Promise<ContactSubmission> {\n    return {\n      id: crypto.randomUUID(),\n      ...contactData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    } as ContactSubmission;\n  }\n\n  async createPurchase(purchaseData: InsertPurchase): Promise<Purchase> {\n    return {\n      id: crypto.randomUUID(),\n      ...purchaseData,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    } as Purchase;\n  }\n\n  async getPurchaseByPaymentIntent(paymentIntentId: string): Promise<Purchase | undefined> {\n    return undefined; // Simplified for demo\n  }\n\n  async updatePurchaseStatus(id: string, status: string): Promise<Purchase> {\n    throw new Error(\"Not implemented in MemStorage\");\n  }\n\n  async getPurchaseWithApp(id: string): Promise<(Purchase & { app: App }) | undefined> {\n    return undefined; // Simplified for demo\n  }\n\n  // Demo session methods (working implementation)\n  async createDemoSession(sessionData: InsertDemoSession): Promise<DemoSession> {\n    const session: DemoSession = {\n      id: crypto.randomUUID(),\n      ...sessionData,\n      createdAt: new Date()\n    } as DemoSession;\n    this.demoSessions.push(session);\n    return session;\n  }\n\n  async getDemoSessionByToken(token: string): Promise<DemoSession | undefined> {\n    return this.demoSessions.find(s => s.sessionToken === token);\n  }\n\n  async validateDemoSession(token: string, requestIp?: string, requestUserAgent?: string): Promise<{ valid: boolean; session?: DemoSession; app?: App; error?: string }> {\n    const session = this.demoSessions.find(s => s.sessionToken === token);\n    \n    if (!session) {\n      return { valid: false, error: 'Session not found' };\n    }\n\n    const app = this.apps.find(a => a.id === session.appId);\n    const now = new Date();\n    const endTime = new Date(session.endTime);\n\n    // Check if session is active and not expired\n    if (!session.isActive || now > endTime) {\n      return { valid: false, session, app, error: 'Session expired' };\n    }\n\n    // Enhanced security: Check IP binding\n    if (requestIp && session.ipAddress !== requestIp) {\n      return { valid: false, session, app, error: 'IP address mismatch - session cannot be shared' };\n    }\n\n    return { valid: true, session, app };\n  }\n\n  async getActiveDemoSessionsCountByIpAndApp(ipAddress: string, appId: string): Promise<number> {\n    const now = new Date();\n    return this.demoSessions.filter(s => \n      s.ipAddress === ipAddress && \n      s.appId === appId && \n      s.isActive && \n      new Date(s.endTime) >= now\n    ).length;\n  }\n\n  async getDemoSessionsCountByIpAndAppToday(ipAddress: string, appId: string): Promise<number> {\n    const startOfDay = new Date();\n    startOfDay.setHours(0, 0, 0, 0);\n    const endOfDay = new Date();\n    endOfDay.setHours(23, 59, 59, 999);\n\n    return this.demoSessions.filter(s => \n      s.ipAddress === ipAddress && \n      s.appId === appId &&\n      new Date(s.createdAt) >= startOfDay && \n      new Date(s.createdAt) <= endOfDay\n    ).length;\n  }\n\n  async deactivateDemoSession(id: string): Promise<void> {\n    const session = this.demoSessions.find(s => s.id === id);\n    if (session) {\n      session.isActive = false;\n    }\n  }\n\n  async cleanupExpiredDemoSessions(): Promise<number> {\n    const now = new Date();\n    const expiredCount = this.demoSessions.filter(s => new Date(s.endTime) < now).length;\n    this.demoSessions = this.demoSessions.filter(s => new Date(s.endTime) >= now);\n    return expiredCount;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":23125},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, timestamp, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const apps = pgTable(\"apps\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  longDescription: text(\"long_description\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }),\n  category: varchar(\"category\").notNull(), // mobile, web, desktop\n  imageUrl: text(\"image_url\"),\n  demoUrl: text(\"demo_url\"),\n  githubUrl: text(\"github_url\"),\n  technologies: jsonb(\"technologies\").$type<string[]>().default([]),\n  features: jsonb(\"features\").$type<string[]>().default([]),\n  isPremium: boolean(\"is_premium\").default(false),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const testimonials = pgTable(\"testimonials\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  company: text(\"company\"),\n  position: text(\"position\"),\n  content: text(\"content\").notNull(),\n  rating: decimal(\"rating\", { precision: 2, scale: 1 }).default(\"5.0\"),\n  avatarUrl: text(\"avatar_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const contactSubmissions = pgTable(\"contact_submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  projectType: text(\"project_type\"),\n  budget: text(\"budget\"),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const purchases = pgTable(\"purchases\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  appId: varchar(\"app_id\").references(() => apps.id).notNull(),\n  customerEmail: text(\"customer_email\").notNull(),\n  customerName: text(\"customer_name\"),\n  amount: decimal(\"amount\", { precision: 10, scale: 2 }).notNull(),\n  stripePaymentIntentId: text(\"stripe_payment_intent_id\").notNull(),\n  status: varchar(\"status\").notNull().default(\"pending\"), // pending, completed, failed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const demoSessions = pgTable(\"demo_sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  appId: varchar(\"app_id\").references(() => apps.id).notNull(),\n  sessionToken: text(\"session_token\").notNull().unique(),\n  ipAddress: varchar(\"ip_address\").notNull(),\n  userAgent: text(\"user_agent\"),\n  startTime: timestamp(\"start_time\").defaultNow().notNull(),\n  endTime: timestamp(\"end_time\").notNull(),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertAppSchema = createInsertSchema(apps).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTestimonialSchema = createInsertSchema(testimonials).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactSchema = createInsertSchema(contactSubmissions).omit({\n  id: true,\n  isRead: true,\n  createdAt: true,\n});\n\nexport const insertPurchaseSchema = createInsertSchema(purchases).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertDemoSessionSchema = createInsertSchema(demoSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type App = typeof apps.$inferSelect;\nexport type InsertApp = z.infer<typeof insertAppSchema>;\nexport type Testimonial = typeof testimonials.$inferSelect;\nexport type InsertTestimonial = z.infer<typeof insertTestimonialSchema>;\nexport type ContactSubmission = typeof contactSubmissions.$inferSelect;\nexport type InsertContact = z.infer<typeof insertContactSchema>;\nexport type Purchase = typeof purchases.$inferSelect;\nexport type InsertPurchase = z.infer<typeof insertPurchaseSchema>;\nexport type DemoSession = typeof demoSessions.$inferSelect;\nexport type InsertDemoSession = z.infer<typeof insertDemoSessionSchema>;\n","size_bytes":4151},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/contexts/theme-context\";\nimport Home from \"@/pages/home\";\nimport Checkout from \"@/pages/checkout\";\nimport PrivacyPolicy from \"@/pages/privacy\";\nimport TermsOfService from \"@/pages/terms\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/checkout/:appId\" component={Checkout} />\n      <Route path=\"/privacy\" component={PrivacyPolicy} />\n      <Route path=\"/terms\" component={TermsOfService} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1116},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(203.8863 88.2845% 53.1373%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(210 25% 7.8431%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(202.8169 89.1213% 53.1373%);\n  --selection: hsl(205 100% 87%);\n  --selection-foreground: hsl(210 25% 8%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863 88.2845% 53.1373%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(203.7736 87.6033% 52.5490%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(30 70% 45%);\n  --selection: hsl(30 55% 35%);\n  --selection-foreground: hsl(48 100% 95%);\n  --chart-1: hsl(203.8863 88.2845% 53.1373%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(202.8169 89.1213% 53.1373%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736 87.6033% 52.5490%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(202.8169 89.1213% 53.1373%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n.blue {\n  --background: hsl(220 15% 6%);\n  --foreground: hsl(210 20% 98%);\n  --card: hsl(220 15% 9%);\n  --card-foreground: hsl(210 20% 95%);\n  --popover: hsl(220 15% 6%);\n  --popover-foreground: hsl(210 20% 98%);\n  --primary: hsl(210 100% 70%);\n  --primary-foreground: hsl(220 15% 6%);\n  --secondary: hsl(220 15% 12%);\n  --secondary-foreground: hsl(210 20% 95%);\n  --muted: hsl(220 15% 10%);\n  --muted-foreground: hsl(210 15% 60%);\n  --accent: hsl(220 15% 12%);\n  --accent-foreground: hsl(210 100% 70%);\n  --destructive: hsl(0 85% 60%);\n  --destructive-foreground: hsl(210 20% 98%);\n  --border: hsl(220 15% 15%);\n  --input: hsl(220 15% 12%);\n  --ring: hsl(210 100% 70%);\n  --selection: hsl(210 100% 85%);\n  --selection-foreground: hsl(220 15% 6%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  ::selection {\n    background: hsl(var(--selection));\n    color: hsl(var(--selection-foreground));\n  }\n\n  ::-moz-selection {\n    background: hsl(var(--selection));\n    color: hsl(var(--selection-foreground));\n  }\n}\n\n@layer components {\n  /* Background overlay */\n  /* .background-overlay {\n    background-image: url('https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?auto=format&fit=crop&w=800&h=400');\n    background-size: cover;\n    background-position: center;\n    opacity: 0.3;\n    pointer-events: none;\n    z-index: 1;\n  }*/\n}\n\n@layer utilities {\n\n  /* Enhanced typing cursor animation */\n  .typing-cursor {\n    animation: blink 1s linear infinite;\n  }\n\n  @keyframes blink {\n    0%, 50% {\n      opacity: 1;\n    }\n    51%, 100% {\n      opacity: 0;\n    }\n  }\n\n  /* Text gradient enhancement */\n  .text-gradient {\n    background-size: 200% auto;\n    animation: gradientShift 3s ease-in-out infinite alternate;\n  }\n\n  @keyframes gradientShift {\n    0% {\n      background-position: 0% center;\n    }\n    100% {\n      background-position: 100% center;\n    }\n  }\n\n  /* Accessibility: Respect user's motion preferences */\n  @media (prefers-reduced-motion: reduce) {\n    .typing-cursor {\n      animation: none;\n      opacity: 1;\n    }\n\n    .text-gradient {\n      animation: none;\n      background-position: 0% center;\n    }\n  }\n}","size_bytes":7279},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/about-section.tsx":{"content":"\nimport React from \"react\";\n\nexport default function AboutSection() {\n  return (\n    <section id=\"about\" className=\"min-h-screen py-20 snap-section\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"grid lg:grid-cols-2 gap-16 items-center\">\n          <div className=\"order-2 lg:order-1\">\n            <h2\n              className=\"text-5xl md:text-6xl font-black mb-8 text-primary\"\n              data-testid=\"about-title\"\n            >\n              ABOUT\n            </h2>\n            <div className=\"space-y-6 text-lg\">\n              <p\n                className=\"text-muted-foreground\"\n                data-testid=\"about-description-1\"\n              >\n                I'm Henry Peti, a passionate software engineer and entrepreneur\n                with over 5 years of experience building innovative digital\n                solutions. My journey started in pre-COVID times, and I've\n                evolved with the rapidly changing tech landscape.\n              </p>\n              <p\n                className=\"text-muted-foreground\"\n                data-testid=\"about-description-2\"\n              >\n                I specialize in creating mobile applications, web platforms, and\n                digital experiences that solve real-world problems. From concept\n                to deployment, I handle the entire development lifecycle.\n              </p>\n              <div className=\"grid grid-cols-2 gap-6 mt-8\">\n                <div\n                  className=\"bg-card p-6 rounded-lg brutalist-shadow-secondary\"\n                  data-testid=\"stat-projects\"\n                >\n                  <h3 className=\"text-secondary font-bold text-xl mb-2\">50+</h3>\n                  <p className=\"text-muted-foreground\">Projects Completed</p>\n                </div>\n                <div\n                  className=\"bg-card p-6 rounded-lg brutalist-shadow-secondary\"\n                  data-testid=\"stat-apps\"\n                >\n                  <h3 className=\"text-accent font-bold text-xl mb-2\">15+</h3>\n                  <p className=\"text-muted-foreground\">Apps Published</p>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"order-1 lg:order-2\">\n            <img\n              src=\"https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?auto=format&fit=crop&w=800&h=400\"\n              alt=\"Modern developer workspace with multiple monitors showing code\"\n              className=\"rounded-2xl brutalist-shadow w-full h-auto\"\n              data-testid=\"about-image\"\n            />\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2631},"client/src/components/animated-header.tsx":{"content":"import React from 'react';\nimport { useState, useEffect, useRef } from \"react\";\n\ninterface AnimatedHeaderProps {\n  text: string;\n  className?: string;\n  \"data-testid\"?: string;\n}\n\nexport default function AnimatedHeader({ \n  text, \n  className = \"\", \n  \"data-testid\": dataTestId \n}: AnimatedHeaderProps) {\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const [hasAnimated, setHasAnimated] = useState(false);\n  const [isVisible, setIsVisible] = useState(false);\n  const headerRef = useRef<HTMLHeadingElement>(null);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        if (entry.isIntersecting && !hasAnimated) {\n          setIsVisible(true);\n        }\n      },\n      { threshold: 0.1 }\n    );\n\n    if (headerRef.current) {\n      observer.observe(headerRef.current);\n    }\n\n    return () => observer.disconnect();\n  }, [hasAnimated]);\n\n  useEffect(() => {\n    if (!isVisible || hasAnimated) return;\n\n    const startTyping = () => {\n      setDisplayedText(\"\");\n      let currentIndex = 0;\n      const timer = setInterval(() => {\n        if (currentIndex <= text.length) {\n          setDisplayedText(text.slice(0, currentIndex));\n          currentIndex++;\n        } else {\n          clearInterval(timer);\n          setHasAnimated(true);\n        }\n      }, 80); // Reduced from 100ms to 80ms for smoother effect\n      return timer;\n    };\n\n    // Start typing after a small delay\n    const timeoutId = setTimeout(() => {\n      startTyping();\n    }, 300); // Reduced from 500ms to 300ms for faster start\n\n    return () => clearTimeout(timeoutId);\n  }, [isVisible, text, hasAnimated]);\n\n  return (\n    <h2 \n      ref={headerRef} \n      className={className} \n      data-testid={dataTestId}\n    >\n      {hasAnimated ? text : displayedText}\n      {!hasAnimated && isVisible && <span className=\"typing-cursor text-gradient bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">.</span>}\n    </h2>\n  );\n}","size_bytes":1981},"client/src/components/apps-showcase.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport type { App } from \"@shared/schema\";\nimport AnimatedHeader from \"./animated-header\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Clock, ShoppingBag } from \"lucide-react\";\n\n// Helper function to get the demo proxy base URL (same logic as API calls)\nconst getDemoProxyBaseUrl = () => {\n  return import.meta.env.VITE_API_BASE_URL || '';\n};\n\nexport default function AppsShowcase() {\n  const [activeFilter, setActiveFilter] = useState(\"all\");\n  const [demoModalOpen, setDemoModalOpen] = useState(false);\n  const [currentDemoApp, setCurrentDemoApp] = useState<App | null>(null);\n  const [demoExpiredApp, setDemoExpiredApp] = useState<App | null>(null);\n  const [loadingAppId, setLoadingAppId] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const { data: apps = [], isLoading } = useQuery<App[]>({\n    queryKey: [\"/api/apps\"],\n  });\n\n  // Demo access mutation\n  const demoAccessMutation = useMutation({\n    mutationFn: async (appId: string) => {\n      setLoadingAppId(appId); // Set loading state for specific app\n      const response = await apiRequest(\"POST\", `/api/demo-access/${appId}`);\n      return await response.json();\n    },\n    onSuccess: (data, appId) => {\n      setLoadingAppId(null); // Clear loading state\n      const app = apps.find(a => a.id === appId);\n      if (app && data.sessionToken) {\n        setCurrentDemoApp(app);\n        setDemoModalOpen(true);\n        // Open demo in new window with protected URL - use full URL for cross-platform compatibility\n        const baseUrl = getDemoProxyBaseUrl();\n        const demoProxyUrl = baseUrl \n          ? `${baseUrl.replace(/\\/$/, '')}/api/demo-proxy/${data.sessionToken}`\n          : `/api/demo-proxy/${data.sessionToken}`;\n        const demoWindow = window.open(demoProxyUrl, '_blank');\n        \n        // Start countdown timer\n        const expiresAt = new Date(data.expiresAt);\n        const checkExpiry = () => {\n          if (new Date() >= expiresAt) {\n            setDemoExpiredApp(app);\n            setCurrentDemoApp(null);\n            setDemoModalOpen(false);\n            toast({\n              title: \"Demo Expired\",\n              description: \"Your demo session has expired. Purchase the app for unlimited access.\",\n              variant: \"destructive\",\n            });\n            if (demoWindow && !demoWindow.closed) {\n              demoWindow.close();\n            }\n          }\n        };\n        \n        // Check every 5 seconds\n        const interval = setInterval(checkExpiry, 5000);\n        setTimeout(() => clearInterval(interval), 10 * 60 * 1000);\n      }\n    },\n    onError: (error: any, appId) => {\n      setLoadingAppId(null); // Clear loading state on error\n      console.error(\"Demo access error:\", error);\n      \n      if (error.requiresPurchase) {\n        setDemoExpiredApp(error.app);\n        toast({\n          title: \"Demo Limit Reached\",\n          description: error.message,\n          variant: \"destructive\",\n        });\n      } else {\n        toast({\n          title: \"Demo Access Failed\",\n          description: error.message || \"Failed to access demo. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    },\n  });\n\n  const handleDemoAccess = (app: App) => {\n    if (!app.demoUrl) {\n      toast({\n        title: \"Demo Not Available\",\n        description: \"This app doesn't have a demo available.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    demoAccessMutation.mutate(app.id);\n  };\n\n  const filteredApps = activeFilter === \"all\" \n    ? apps \n    : apps.filter(app => app.category === activeFilter);\n\n  const filterButtons = [\n    { key: \"all\", label: \"ALL\" },\n    { key: \"mobile\", label: \"MOBILE\" },\n    { key: \"web\", label: \"WEB\" },\n    { key: \"desktop\", label: \"DESKTOP\" },\n  ];\n\n  if (isLoading) {\n    return (\n      <section id=\"apps\" className=\"min-h-screen py-20 snap-section\">\n        <div className=\"container mx-auto px-6\">\n          <AnimatedHeader \n            text=\"MY APPS\" \n            className=\"text-5xl md:text-6xl font-black mb-16 text-center text-primary\"\n          />\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[1, 2, 3, 4, 5, 6].map((i) => (\n              <div key={i} className=\"bg-card rounded-2xl overflow-hidden brutalist-shadow animate-pulse\">\n                <div className=\"w-full h-48 bg-muted\"></div>\n                <div className=\"p-6\">\n                  <div className=\"h-6 bg-muted rounded mb-2\"></div>\n                  <div className=\"h-4 bg-muted rounded mb-4\"></div>\n                  <div className=\"flex gap-2 mb-4\">\n                    <div className=\"h-6 w-16 bg-muted rounded-full\"></div>\n                    <div className=\"h-6 w-16 bg-muted rounded-full\"></div>\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <div className=\"flex-1 h-10 bg-muted rounded\"></div>\n                    <div className=\"flex-1 h-10 bg-muted rounded\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"apps\" className=\"min-h-screen py-20 snap-section apple-scroll-section relative overflow-hidden\">\n      {/* Gradient background */}\n      <div className=\"absolute inset-0 gradient-parallax-1 opacity-20 z-0\"></div>\n      <div className=\"container mx-auto px-6 relative z-10\">\n        <AnimatedHeader \n          text=\"MY APPS\" \n          className=\"text-5xl md:text-6xl font-black mb-16 text-center text-primary\"\n          data-testid=\"apps-title\"\n        />\n        \n        {/* Filter Buttons */}\n        <div className=\"flex flex-wrap justify-center gap-4 mb-12\">\n          {filterButtons.map((button) => (\n            <button\n              key={button.key}\n              onClick={() => setActiveFilter(button.key)}\n              className={`px-6 py-3 rounded-lg font-bold transition-all ${\n                activeFilter === button.key\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"bg-muted text-muted-foreground hover:bg-secondary hover:text-secondary-foreground\"\n              }`}\n              data-testid={`filter-${button.key}`}\n            >\n              {button.label}\n            </button>\n          ))}\n        </div>\n        \n        {/* Apps Grid */}\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {filteredApps.map((app) => (\n            <div \n              key={app.id} \n              className=\"app-card bg-card rounded-2xl overflow-hidden brutalist-shadow\"\n              data-testid={`app-card-${app.id}`}\n            >\n              <img \n                src={app.imageUrl || \"https://images.unsplash.com/photo-1512941937669-90a1b58e7e9c?auto=format&fit=crop&w=800&h=400\"} \n                alt={`${app.name} interface`}\n                className=\"w-full h-48 object-cover\" \n              />\n              <div className=\"p-6\">\n                <h3 className=\"text-xl font-bold mb-2 text-foreground\" data-testid={`app-name-${app.id}`}>{app.name}</h3>\n                <p className=\"text-muted-foreground mb-4\" data-testid={`app-description-${app.id}`}>{app.description}</p>\n                <div className=\"flex flex-wrap gap-2 mb-4\">\n                  {app.technologies?.map((tech, index) => (\n                    <span \n                      key={index}\n                      className=\"bg-primary/20 text-primary px-3 py-1 rounded-full text-sm\"\n                      data-testid={`app-tech-${app.id}-${index}`}\n                    >\n                      {tech}\n                    </span>\n                  ))}\n                </div>\n                <div className=\"flex gap-3\">\n                  {app.demoUrl && (\n                    <Button\n                      onClick={() => handleDemoAccess(app)}\n                      disabled={loadingAppId === app.id}\n                      className=\"flex-1 bg-primary text-primary-foreground hover:bg-primary/90\"\n                      data-testid={`app-demo-${app.id}`}\n                    >\n                      <Clock className=\"w-4 h-4 mr-2\" />\n                      {loadingAppId === app.id ? \"Loading...\" : \"Demo (10 min)\"}\n                    </Button>\n                  )}\n                  {app.githubUrl && (\n                    <a \n                      href={app.githubUrl}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className=\"flex-1 bg-secondary text-secondary-foreground py-2 px-4 rounded-lg text-center font-bold hover:bg-secondary/90 transition-colors\"\n                      data-testid={`app-github-${app.id}`}\n                    >\n                      GitHub\n                    </a>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {filteredApps.length === 0 && (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground text-xl\" data-testid=\"apps-empty-state\">\n              No apps found in this category.\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Demo Session Timer Modal */}\n      <Dialog open={demoModalOpen} onOpenChange={setDemoModalOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Clock className=\"w-5 h-5 text-primary\" />\n              Demo Active: {currentDemoApp?.name}\n            </DialogTitle>\n            <DialogDescription>\n              Your demo session is active for 10 minutes. The demo will automatically close when the session expires.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"bg-muted rounded-lg p-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">Session Status</span>\n                <span className=\"text-sm text-primary\">Active</span>\n              </div>\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                Demo will expire in approximately 10 minutes\n              </div>\n            </div>\n            \n            {currentDemoApp?.isPremium && currentDemoApp.price && (\n              <div className=\"bg-primary/5 border border-primary/20 rounded-lg p-4\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <ShoppingBag className=\"w-4 h-4 text-primary\" />\n                  <span className=\"font-medium text-primary\">Like what you see?</span>\n                </div>\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  Purchase {currentDemoApp.name} for unlimited access and all premium features.\n                </p>\n                <Button \n                  size=\"sm\" \n                  className=\"w-full\"\n                  onClick={() => {\n                    // Navigate to checkout - you can implement this based on your routing\n                    window.location.href = `/checkout?app=${currentDemoApp.id}`;\n                  }}\n                  data-testid=\"demo-purchase-button\"\n                >\n                  Purchase for ${currentDemoApp.price}\n                </Button>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Demo Expired / Purchase Conversion Modal */}\n      <Dialog open={!!demoExpiredApp} onOpenChange={() => setDemoExpiredApp(null)}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2 text-destructive\">\n              <Clock className=\"w-5 h-5\" />\n              Demo Session Expired\n            </DialogTitle>\n            <DialogDescription>\n              Your demo session for {demoExpiredApp?.name} has expired or you've reached the daily limit.\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"bg-destructive/5 border border-destructive/20 rounded-lg p-4\">\n              <h4 className=\"font-medium text-destructive mb-2\">Want to continue?</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Purchase {demoExpiredApp?.name} for unlimited access with no time restrictions.\n              </p>\n            </div>\n            \n            {demoExpiredApp?.isPremium && demoExpiredApp.price && (\n              <div className=\"space-y-3\">\n                <Button \n                  className=\"w-full\"\n                  onClick={() => {\n                    // Navigate to checkout - you can implement this based on your routing\n                    window.location.href = `/checkout?app=${demoExpiredApp.id}`;\n                  }}\n                  data-testid=\"expired-demo-purchase-button\"\n                >\n                  <ShoppingBag className=\"w-4 h-4 mr-2\" />\n                  Purchase for ${demoExpiredApp.price}\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\"\n                  onClick={() => setDemoExpiredApp(null)}\n                  data-testid=\"expired-demo-close-button\"\n                >\n                  Maybe Later\n                </Button>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </section>\n  );\n}\n","size_bytes":13686},"client/src/components/contact-modal.tsx":{"content":"import React, { useState } from \"react\";\n\ninterface ContactModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function ContactModal({ isOpen, onClose }: ContactModalProps) {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center\">\n      {/* Backdrop */}\n      <div \n        className=\"absolute inset-0 bg-black/50 backdrop-blur-sm\" \n        onClick={onClose}\n      ></div>\n      \n      {/* Modal */}\n      <div className=\"relative bg-card rounded-2xl p-8 max-w-md mx-4 brutalist-shadow text-center\">\n        <div className=\"mb-6\">\n          <div className=\"w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <svg \n              className=\"w-8 h-8 text-primary\" \n              fill=\"none\" \n              stroke=\"currentColor\" \n              viewBox=\"0 0 24 24\"\n            >\n              <path \n                strokeLinecap=\"round\" \n                strokeLinejoin=\"round\" \n                strokeWidth={2} \n                d=\"M5 13l4 4L19 7\" \n              />\n            </svg>\n          </div>\n          <h3 className=\"text-2xl font-bold text-primary mb-2\">Message Sent!</h3>\n          <p className=\"text-muted-foreground\">\n            Thanks for reaching out! I'll get back to you within 24 hours to discuss your project.\n          </p>\n        </div>\n        \n        <button\n          onClick={onClose}\n          className=\"bg-primary text-primary-foreground px-6 py-3 rounded-lg font-bold hover:bg-primary/90 transition-colors\"\n          data-testid=\"modal-close\"\n        >\n          Got it!\n        </button>\n      </div>\n    </div>\n  );\n}","size_bytes":1671},"client/src/components/contact-section.tsx":{"content":"import React, { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport AnimatedHeader from \"./animated-header\";\nimport ContactModal from \"./contact-modal\";\n\nexport default function ContactSection() {\n  const { toast } = useToast();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    projectType: \"\",\n    budget: \"\",\n    message: \"\",\n    // Honeypot field (hidden from users, catches bots)\n    website: \"\",\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      await apiRequest(\"POST\", \"/api/contact\", data);\n    },\n    onSuccess: () => {\n      setIsModalOpen(true);\n      setFormData({\n        name: \"\",\n        email: \"\",\n        projectType: \"\",\n        budget: \"\",\n        message: \"\",\n        website: \"\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    contactMutation.mutate(formData);\n  };\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n\n  return (\n    <section id=\"contact\" className=\"min-h-screen py-20 snap-section apple-scroll-section relative overflow-hidden\">\n      {/* Gradient background */}\n      <div className=\"absolute inset-0 gradient-parallax-3 opacity-20 z-0\"></div>\n      <div className=\"container mx-auto px-6 relative z-10\">\n        <div className=\"max-w-4xl mx-auto\">\n          <AnimatedHeader \n            text=\"GET IN TOUCH\" \n            className=\"text-5xl md:text-6xl font-black mb-16 text-center text-primary\"\n            data-testid=\"contact-title\"\n          />\n          \n          <div className=\"grid lg:grid-cols-2 gap-16\">\n            {/* Contact Info */}\n            <div>\n              <h3 className=\"text-2xl font-bold mb-8 text-secondary\">Let's Build Something Amazing</h3>\n              <p className=\"text-muted-foreground mb-8 text-lg\" data-testid=\"contact-description\">\n                Ready to turn your ideas into reality? Whether you need a custom app, web platform, or digital solution, I'm here to help bring your vision to life.\n              </p>\n              \n              <div className=\"space-y-6\">\n                <a \n                  href=\"mailto:henrypeti.dev@gmail.com\"\n                  className=\"flex items-center hover:bg-muted/50 p-2 rounded-lg transition-colors group\"\n                  data-testid=\"contact-email\"\n                >\n                  <div className=\"w-12 h-12 bg-primary rounded-lg flex items-center justify-center mr-4 group-hover:bg-primary/80 transition-colors\">\n                    <i className=\"fas fa-envelope text-primary-foreground\"></i>\n                  </div>\n                  <div>\n                    <h4 className=\"font-bold text-foreground group-hover:text-primary transition-colors\">Email</h4>\n                    <p className=\"text-muted-foreground group-hover:text-foreground transition-colors\">henrypeti.dev@gmail.com</p>\n                  </div>\n                </a>\n                \n                <a \n                  href=\"tel:+64218535579\"\n                  className=\"flex items-center hover:bg-muted/50 p-2 rounded-lg transition-colors group\"\n                  data-testid=\"contact-phone\"\n                >\n                  <div className=\"w-12 h-12 bg-secondary rounded-lg flex items-center justify-center mr-4 group-hover:bg-secondary/80 transition-colors\">\n                    <i className=\"fas fa-phone text-secondary-foreground\"></i>\n                  </div>\n                  <div>\n                    <h4 className=\"font-bold text-foreground group-hover:text-primary transition-colors\">Phone</h4>\n                    <p className=\"text-muted-foreground group-hover:text-foreground transition-colors\">021 853579</p>\n                  </div>\n                </a>\n                \n                <a \n                  href=\"https://maps.google.com/maps?q=21/3+Inanga+Street,+Hobsonville,+Auckland+NZ\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"flex items-center hover:bg-muted/50 p-2 rounded-lg transition-colors group\"\n                  data-testid=\"contact-location\"\n                >\n                  <div className=\"w-12 h-12 bg-accent rounded-lg flex items-center justify-center mr-4 group-hover:bg-accent/80 transition-colors\">\n                    <i className=\"fas fa-map-marker-alt text-accent-foreground\"></i>\n                  </div>\n                  <div>\n                    <h4 className=\"font-bold text-foreground group-hover:text-primary transition-colors\">Location</h4>\n                    <p className=\"text-muted-foreground group-hover:text-foreground transition-colors\">21/3 Inanga Street, Hobsonville, Auckland NZ</p>\n                  </div>\n                </a>\n              </div>\n              \n              {/* Social Links */}\n              <div className=\"mt-8\">\n                <h4 className=\"font-bold text-foreground mb-4\">Follow Me</h4>\n                <div className=\"flex space-x-4\">\n                  <a \n                    href=\"https://github.com/gadgetboy27\" \n                    className=\"w-12 h-12 bg-muted rounded-lg flex items-center justify-center hover:bg-primary hover:text-primary-foreground transition-colors\"\n                    data-testid=\"social-github\"\n                  >\n                    <i className=\"fab fa-github\"></i>\n                  </a>\n                  <a \n                    href=\"https://linkedin.com/in/henrypeti\" \n                    className=\"w-12 h-12 bg-muted rounded-lg flex items-center justify-center hover:bg-primary hover:text-primary-foreground transition-colors\"\n                    data-testid=\"social-linkedin\"\n                  >\n                    <i className=\"fab fa-linkedin\"></i>\n                  </a>\n                  <a \n                    href=\"https://wa.me/64218535579\" \n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"w-12 h-12 bg-muted rounded-lg flex items-center justify-center hover:bg-primary hover:text-primary-foreground transition-colors\"\n                    data-testid=\"social-whatsapp\"\n                  >\n                    <i className=\"fab fa-whatsapp\"></i>\n                  </a>\n                  <a \n                    href=\"https://instagram.com/henrypeti.dev\" \n                    className=\"w-12 h-12 bg-muted rounded-lg flex items-center justify-center hover:bg-primary hover:text-primary-foreground transition-colors\"\n                    data-testid=\"social-instagram\"\n                  >\n                    <i className=\"fab fa-instagram\"></i>\n                  </a>\n                  <a \n                    href=\"https://facebook.com/ZIGZAGAPPS\" \n                    className=\"w-12 h-12 bg-muted rounded-lg flex items-center justify-center hover:bg-primary hover:text-primary-foreground transition-colors\"\n                    data-testid=\"social-facebook\"\n                  >\n                    <i className=\"fab fa-facebook\"></i>\n                  </a>\n                </div>\n              </div>\n            </div>\n            \n            {/* Contact Form */}\n            <div className=\"bg-card p-8 rounded-2xl brutalist-shadow-secondary\">\n              <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"contact-form\">\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  <div>\n                    <label className=\"block text-sm font-bold text-foreground mb-2\">Name *</label>\n                    <Input\n                      type=\"text\"\n                      value={formData.name}\n                      onChange={(e) => handleInputChange(\"name\", e.target.value)}\n                      required\n                      className=\"bg-input border-border\"\n                      data-testid=\"input-name\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-bold text-foreground mb-2\">Email *</label>\n                    <Input\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange(\"email\", e.target.value)}\n                      required\n                      className=\"bg-input border-border\"\n                      data-testid=\"input-email\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-bold text-foreground mb-2\">Project Type</label>\n                  <Select value={formData.projectType} onValueChange={(value) => handleInputChange(\"projectType\", value)}>\n                    <SelectTrigger className=\"bg-input border-border\" data-testid=\"select-project-type\">\n                      <SelectValue placeholder=\"Select project type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"mobile\">Mobile App Development</SelectItem>\n                      <SelectItem value=\"web\">Web Application</SelectItem>\n                      <SelectItem value=\"desktop\">Desktop Software</SelectItem>\n                      <SelectItem value=\"ecommerce\">E-commerce Platform</SelectItem>\n                      <SelectItem value=\"consulting\">Consulting</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-bold text-foreground mb-2\">Budget Range</label>\n                  <Select value={formData.budget} onValueChange={(value) => handleInputChange(\"budget\", value)}>\n                    <SelectTrigger className=\"bg-input border-border\" data-testid=\"select-budget\">\n                      <SelectValue placeholder=\"Select budget range\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"5k-10k\">$5,000 - $10,000</SelectItem>\n                      <SelectItem value=\"10k-25k\">$10,000 - $25,000</SelectItem>\n                      <SelectItem value=\"25k-50k\">$25,000 - $50,000</SelectItem>\n                      <SelectItem value=\"50k+\">$50,000+</SelectItem>\n                      <SelectItem value=\"discuss\">Let's discuss</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-bold text-foreground mb-2\">Message *</label>\n                  <Textarea\n                    value={formData.message}\n                    onChange={(e) => handleInputChange(\"message\", e.target.value)}\n                    rows={5}\n                    required\n                    placeholder=\"Tell me about your project...\"\n                    className=\"bg-input border-border resize-none\"\n                    data-testid=\"textarea-message\"\n                    maxLength={2000}\n                  />\n                  <div className=\"text-xs text-muted-foreground mt-1\">\n                    {formData.message.length}/2000 characters\n                  </div>\n                </div>\n\n                {/* Honeypot field - hidden from users */}\n                <input\n                  type=\"text\"\n                  name=\"website\"\n                  value={formData.website}\n                  onChange={(e) => handleInputChange(\"website\", e.target.value)}\n                  style={{ display: 'none' }}\n                  tabIndex={-1}\n                  autoComplete=\"off\"\n                />\n                \n                <Button \n                  type=\"submit\" \n                  disabled={contactMutation.isPending}\n                  className=\"w-full bg-primary text-primary-foreground py-4 rounded-lg font-bold text-lg brutalist-shadow hover:translate-x-2 hover:translate-y-2 hover:shadow-none transition-all\"\n                  data-testid=\"button-submit\"\n                >\n                  {contactMutation.isPending ? (\n                    <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  ) : (\n                    <i className=\"fas fa-paper-plane mr-2\"></i>\n                  )}\n                  {contactMutation.isPending ? \"SENDING...\" : \"SEND MESSAGE\"}\n                </Button>\n              </form>\n            </div>\n          </div>\n        </div>\n        \n        <ContactModal \n          isOpen={isModalOpen} \n          onClose={() => setIsModalOpen(false)} \n        />\n      </div>\n    </section>\n  );\n}\n","size_bytes":13211},"client/src/components/custom-cursor.tsx":{"content":"import React, { useEffect, useState } from \"react\";\n\nexport default function CustomCursor() {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n  const [isHovering, setIsHovering] = useState(false);\n\n  useEffect(() => {\n    const updateCursor = (e: MouseEvent) => {\n      setPosition({ x: e.clientX, y: e.clientY });\n    };\n\n    const handleMouseEnter = () => setIsHovering(true);\n    const handleMouseLeave = () => setIsHovering(false);\n\n    // Track mouse movement\n    document.addEventListener(\"mousemove\", updateCursor);\n\n    // Track hover on interactive elements\n    const interactiveElements = document.querySelectorAll(\"a, button, .app-card\");\n    interactiveElements.forEach((el) => {\n      el.addEventListener(\"mouseenter\", handleMouseEnter);\n      el.addEventListener(\"mouseleave\", handleMouseLeave);\n    });\n\n    return () => {\n      document.removeEventListener(\"mousemove\", updateCursor);\n      interactiveElements.forEach((el) => {\n        el.removeEventListener(\"mouseenter\", handleMouseEnter);\n        el.removeEventListener(\"mouseleave\", handleMouseLeave);\n      });\n    };\n  }, []);\n\n  return (\n    <div\n      className={`custom-cursor ${isHovering ? \"cursor-hover\" : \"\"}`}\n      style={{\n        left: position.x,\n        top: position.y,\n      }}\n    />\n  );\n}\n","size_bytes":1292},"client/src/components/hero-section.tsx":{"content":"import React from 'react';\nimport { useState, useEffect } from \"react\";\n\ninterface HeroSectionProps {\n  onTypingComplete?: (isComplete: boolean) => void;\n}\n\nexport default function HeroSection({ onTypingComplete }: HeroSectionProps) {\n  const [displayedText, setDisplayedText] = useState(\"\");\n  const fullText = \"ZIGZAG APPS\";\n  const typingSpeed = 120; // ms per character\n  \n  \n  useEffect(() => {\n    const startTyping = () => {\n      setDisplayedText(\"\");\n      // Notify parent that typing is restarting\n      onTypingComplete?.(false);\n      \n      let currentIndex = 0;\n      const timer = setInterval(() => {\n        if (currentIndex < fullText.length) {\n          setDisplayedText(fullText.slice(0, currentIndex));\n          currentIndex++;\n        } else if (currentIndex === fullText.length) {\n          // Display full text and notify parent that typing is complete\n          setDisplayedText(fullText.slice(0, currentIndex));\n          clearInterval(timer);\n          onTypingComplete?.(true);\n        }\n      }, typingSpeed);\n      return timer;\n    };\n\n    // Start immediately\n    const initialTimer = startTyping();\n    \n    // Repeat every 10 seconds\n    const repeatTimer = setInterval(() => {\n      startTyping();\n    }, 10000);\n\n    return () => {\n      clearInterval(initialTimer);\n      clearInterval(repeatTimer);\n    };\n  }, []);\n\n  return (\n    <section id=\"hero\" className=\"min-h-screen flex items-center justify-center snap-section relative overflow-hidden pt-20\">\n      {/* Background Video */}\n      <div className=\"absolute inset-0 w-full h-full\">\n        <video \n          autoPlay \n          muted \n          loop \n          playsInline\n          className=\"w-full h-full object-cover opacity-20\"\n          style={{ filter: 'grayscale(100%) contrast(1.2)' }}\n        >\n          <source src=\"https://player.vimeo.com/external/373718227.hd.mp4?s=8bb5b8e8cbeb9e07b8e6d2b51f9f7cb3b8c4e5e8&profile_id=175\" type=\"video/mp4\" />\n          <source src=\"https://cdn.pixabay.com/vimeo/371175973/coding-37117.mp4?width=1280&hash=ffe4e8d7fd6ff66804f2c1a0ec0b2d99ceb78fe4\" type=\"video/mp4\" />\n        </video>\n        <div className=\"absolute inset-0 bg-gradient-to-b from-background/80 via-background/60 to-background/80\"></div>\n      </div>\n\n      {/* Floating geometric shapes */}\n      <div className=\"absolute top-20 left-20 w-16 h-16 bg-primary/30 rotate-45 animate-float\"></div>\n      <div className=\"absolute top-40 right-32 w-24 h-24 bg-secondary/30 rounded-full animate-bounce-slow\"></div>\n      <div className=\"absolute bottom-32 left-1/4 w-12 h-12 bg-accent/30 animate-pulse-slow\"></div>\n      \n      <div className=\"container mx-auto px-6 text-center relative z-10\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Main animated title */}\n          <div className=\"relative\">\n            <h1 \n              className=\"text-6xl md:text-8xl lg:text-9xl font-black mb-4 leading-tight\"\n              data-testid=\"hero-title\"\n            >\n              <span className=\"text-gradient bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">\n                {displayedText}\n              </span>\n              <span className=\"typing-cursor text-gradient bg-gradient-to-r from-primary via-secondary to-accent bg-clip-text text-transparent\">.</span>\n            </h1>\n          </div>\n          \n          {/* Subtitle with name */}\n          <div className=\"text-lg md:text-xl text-muted-foreground mb-8 font-mono\">\n            by <span className=\"text-primary font-bold\">Henry Peti</span>\n          </div>\n          \n          <div className=\"text-2xl md:text-4xl font-bold mb-8 text-foreground\">\n            <span className=\"block text-primary\">SOFTWARE ENGINEER</span>\n            <span className=\"block text-secondary\">APP DEVELOPER</span>\n            <span className=\"block text-accent\">ENTREPRENEUR</span>\n          </div>\n          \n          <p className=\"text-xl md:text-2xl text-muted-foreground mb-12 max-w-2xl mx-auto\" data-testid=\"hero-description\">\n            Crafting cutting-edge mobile apps and web solutions that push the boundaries of what's possible\n          </p>\n          \n          <div className=\"flex flex-col sm:flex-row gap-6 justify-center\">\n            <a \n              href=\"#apps\" \n              className=\"bg-primary text-primary-foreground px-8 py-4 rounded-lg font-bold text-lg brutalist-shadow hover:translate-x-2 hover:translate-y-2 hover:shadow-none transition-all\"\n              data-testid=\"button-explore-apps\"\n            >\n              EXPLORE APPS\n            </a>\n            <a \n              href=\"#store\" \n              className=\"bg-transparent border-2 border-secondary text-secondary px-8 py-4 rounded-lg font-bold text-lg hover:bg-secondary hover:text-secondary-foreground transition-all\"\n              data-testid=\"button-buy-apps\"\n            >\n              BUY PREMIUM APPS\n            </a>\n          </div>\n          \n          {/* Social Share */}\n          <div className=\"mt-8 flex justify-center\">\n            <button\n              onClick={() => {\n                const url = encodeURIComponent(window.location.href);\n                const text = encodeURIComponent('Check out ZIGZAG APPS - Amazing mobile and web applications by Henry Peti!');\n                window.open(`https://www.facebook.com/sharer/sharer.php?u=${url}&quote=${text}`, '_blank', 'noopener,noreferrer');\n              }}\n              className=\"bg-[#1877F2] text-white px-6 py-2 rounded-lg font-semibold text-sm hover:bg-[#166FE5] transition-colors flex items-center gap-2\"\n              data-testid=\"button-share-facebook\"\n            >\n              <i className=\"fab fa-facebook\"></i>\n              Share on Facebook\n            </button>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5814},"client/src/components/navigation-dots.tsx":{"content":"import React from \"react\";\nimport { useScrollSpy } from \"@/hooks/use-scroll-spy\";\n\nconst sections = [\n  { id: \"hero\", label: \"Hero\" },\n  { id: \"about\", label: \"About\" },\n  { id: \"apps\", label: \"Apps\" },\n  { id: \"store\", label: \"Store\" },\n  { id: \"testimonials\", label: \"Testimonials\" },\n  { id: \"contact\", label: \"Contact\" },\n];\n\nexport default function NavigationDots() {\n  const activeSection = useScrollSpy(sections.map(s => s.id));\n\n  const scrollToSection = (sectionId: string) => {\n    const element = document.getElementById(sectionId);\n    if (element) {\n      element.scrollIntoView({ behavior: \"smooth\" });\n    }\n  };\n\n  return (\n    <div className=\"nav-indicator hidden lg:block\">\n      {sections.map((section) => (\n        <div\n          key={section.id}\n          className={`nav-dot ${activeSection === section.id ? \"active\" : \"\"}`}\n          onClick={() => scrollToSection(section.id)}\n          title={section.label}\n          data-testid={`nav-dot-${section.id}`}\n        />\n      ))}\n    </div>\n  );\n}\n","size_bytes":1020},"client/src/components/premium-store.tsx":{"content":"import React from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport type { App } from \"@shared/schema\";\nimport AnimatedHeader from \"./animated-header\";\n\nexport default function PremiumStore() {\n  const { data: premiumApps = [], isLoading } = useQuery<App[]>({\n    queryKey: [\"/api/apps\"],\n    select: (apps) => apps.filter(app => app.isPremium && app.price),\n  });\n\n  if (isLoading) {\n    return (\n      <section id=\"store\" className=\"min-h-screen py-20 snap-section bg-muted/20\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center mb-16\">\n            <AnimatedHeader \n              text=\"ZIGZAG STORE\" \n              className=\"text-5xl md:text-6xl font-black mb-6 text-secondary\"\n            />\n            <div className=\"h-4 bg-muted rounded max-w-2xl mx-auto\"></div>\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"bg-card rounded-2xl overflow-hidden brutalist-shadow-secondary animate-pulse\">\n                <div className=\"w-full h-40 bg-muted\"></div>\n                <div className=\"p-6\">\n                  <div className=\"h-6 bg-muted rounded mb-2\"></div>\n                  <div className=\"h-4 bg-muted rounded mb-4\"></div>\n                  <div className=\"h-8 bg-muted rounded mb-4\"></div>\n                  <div className=\"space-y-2 mb-6\">\n                    <div className=\"h-4 bg-muted rounded\"></div>\n                    <div className=\"h-4 bg-muted rounded\"></div>\n                  </div>\n                  <div className=\"h-12 bg-muted rounded\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  return (\n    <section id=\"store\" className=\"min-h-screen py-20 snap-section apple-scroll-section relative overflow-hidden\">\n      {/* Gradient background */}\n      <div className=\"absolute inset-0 gradient-parallax-2 opacity-20 z-0\"></div>\n      <div className=\"container mx-auto px-6 relative z-10\">\n        <div className=\"text-center mb-16\">\n          <AnimatedHeader \n            text=\"ZIGZAG STORE\" \n            className=\"text-5xl md:text-6xl font-black mb-6 text-secondary\"\n            data-testid=\"store-title\"\n          />\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\" data-testid=\"store-description\">\n            Get exclusive access to premium applications with advanced features, priority support, and lifetime updates.\n          </p>\n        </div>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {premiumApps.map((app, index) => (\n            <div \n              key={app.id} \n              className=\"bg-card rounded-2xl overflow-hidden brutalist-shadow-secondary relative\"\n              data-testid={`premium-app-${app.id}`}\n            >\n              {index === 0 && (\n                <div className=\"absolute top-4 right-4 bg-accent text-accent-foreground px-3 py-1 rounded-full text-sm font-bold\">\n                  BESTSELLER\n                </div>\n              )}\n              <img \n                src={app.imageUrl || \"https://images.unsplash.com/photo-1563013544-824ae1b704d3?auto=format&fit=crop&w=800&h=300\"} \n                alt={`${app.name} interface`}\n                className=\"w-full h-40 object-cover\" \n              />\n              <div className=\"p-6\">\n                <h3 className=\"text-2xl font-bold mb-2 text-foreground\" data-testid={`premium-app-name-${app.id}`}>\n                  {app.name}\n                </h3>\n                <p className=\"text-muted-foreground mb-4\" data-testid={`premium-app-description-${app.id}`}>\n                  {app.longDescription || app.description}\n                </p>\n                <div className=\"flex items-center mb-4\">\n                  <span className=\"text-3xl font-bold text-primary\" data-testid={`premium-app-price-${app.id}`}>\n                    ${app.price}\n                  </span>\n                  <span className=\"text-muted-foreground ml-2\">one-time</span>\n                </div>\n                <ul className=\"text-sm text-muted-foreground mb-6 space-y-2\">\n                  {app.features?.map((feature, featureIndex) => (\n                    <li key={featureIndex} className=\"flex items-center\" data-testid={`premium-app-feature-${app.id}-${featureIndex}`}>\n                      <i className=\"fas fa-check text-accent mr-2\"></i> {feature}\n                    </li>\n                  )) || [\n                    <li key=\"default-1\" className=\"flex items-center\"><i className=\"fas fa-check text-accent mr-2\"></i> Premium features</li>,\n                    <li key=\"default-2\" className=\"flex items-center\"><i className=\"fas fa-check text-accent mr-2\"></i> Priority support</li>,\n                    <li key=\"default-3\" className=\"flex items-center\"><i className=\"fas fa-check text-accent mr-2\"></i> Lifetime updates</li>,\n                  ]}\n                </ul>\n{/* High-value premium app - Instant Connect */}\n                {app.price && parseFloat(app.price) >= 100000 ? (\n                  <div className=\"space-y-3\">\n                    <div className=\"bg-gradient-to-r from-yellow-400 to-orange-500 text-black p-3 rounded-lg text-center font-bold\">\n                      <i className=\"fas fa-crown mr-2\"></i>ENTERPRISE SOLUTION\n                    </div>\n                    <a \n                      href=\"#contact\"\n                      className=\"w-full bg-gradient-to-r from-primary to-secondary text-white py-4 rounded-lg font-bold hover:from-primary/90 hover:to-secondary/90 transition-all transform hover:scale-105 flex items-center justify-center\"\n                      data-testid={`premium-app-contact-${app.id}`}\n                    >\n                      <i className=\"fas fa-phone mr-2\"></i>INSTANT CONNECT\n                    </a>\n                    <p className=\"text-xs text-muted-foreground text-center\">\n                      Custom pricing • Enterprise licensing • Direct consultation\n                    </p>\n                  </div>\n                ) : (\n                  <Link href={`/checkout/${app.id}`}>\n                    <button \n                      className=\"w-full bg-primary text-primary-foreground py-3 rounded-lg font-bold hover:bg-primary/90 transition-colors\"\n                      data-testid={`premium-app-buy-${app.id}`}\n                    >\n                      <i className=\"fas fa-shopping-cart mr-2\"></i>BUY NOW\n                    </button>\n                  </Link>\n                )}\n              </div>\n            </div>\n          ))}\n        </div>\n        \n        {premiumApps.length === 0 && (\n          <div className=\"text-center py-12\">\n            <p className=\"text-muted-foreground text-xl\" data-testid=\"store-empty-state\">\n              No premium apps available at the moment.\n            </p>\n          </div>\n        )}\n        \n        {/* Payment Security */}\n        <div className=\"text-center mt-16\">\n          <p className=\"text-muted-foreground mb-4\">Secure payments powered by Stripe • 30-day money-back guarantee</p>\n          <div className=\"flex justify-center space-x-6 text-2xl text-muted-foreground\">\n            <i className=\"fab fa-cc-visa\"></i>\n            <i className=\"fab fa-cc-mastercard\"></i>\n            <i className=\"fab fa-cc-amex\"></i>\n            <i className=\"fab fa-paypal\"></i>\n            <i className=\"fab fa-apple-pay\"></i>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":7565},"client/src/components/testimonials.tsx":{"content":"import React from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { Testimonial } from \"@shared/schema\";\nimport AnimatedHeader from \"@/components/animated-header\";\n\nexport default function Testimonials() {\n  const { data: testimonials = [], isLoading } = useQuery<Testimonial[]>({\n    queryKey: [\"/api/testimonials\"],\n  });\n\n  if (isLoading) {\n    return (\n      <section id=\"testimonials\" className=\"min-h-screen py-20 snap-section\">\n        <div className=\"container mx-auto px-6\">\n          <AnimatedHeader \n            text=\"TESTIMONIALS\" \n            className=\"text-4xl md:text-5xl lg:text-6xl font-black mb-16 text-center text-primary w-full\"\n            data-testid=\"testimonials-title\"\n          />\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"bg-card p-8 rounded-2xl brutalist-shadow animate-pulse\">\n                <div className=\"flex gap-1 mb-4\">\n                  {[1, 2, 3, 4, 5].map((star) => (\n                    <div key={star} className=\"w-5 h-5 bg-muted rounded\"></div>\n                  ))}\n                </div>\n                <div className=\"space-y-2 mb-6\">\n                  <div className=\"h-4 bg-muted rounded\"></div>\n                  <div className=\"h-4 bg-muted rounded\"></div>\n                  <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-12 h-12 bg-muted rounded-full mr-4\"></div>\n                  <div>\n                    <div className=\"h-4 bg-muted rounded mb-1 w-24\"></div>\n                    <div className=\"h-3 bg-muted rounded w-32\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n    );\n  }\n\n  // Default testimonials if none in database\n  const defaultTestimonials = [\n    {\n      id: \"1\",\n      name: \"John Smith\",\n      company: \"TechStart Inc.\",\n      position: \"CEO\",\n      content: \"Henry's apps transformed our business operations. The quality and innovation in his work is outstanding!\",\n      rating: \"5.0\",\n      avatarUrl: null,\n      isActive: true,\n      createdAt: new Date(),\n    },\n    {\n      id: \"2\",\n      name: \"Maria Johnson\",\n      company: \"PixelPro\",\n      position: \"Creative Director\",\n      content: \"Working with Henry was a fantastic experience. His attention to detail and technical expertise is unmatched.\",\n      rating: \"5.0\",\n      avatarUrl: null,\n      isActive: true,\n      createdAt: new Date(),\n    },\n    {\n      id: \"3\",\n      name: \"David Lee\",\n      company: \"AppVenture\",\n      position: \"Founder\",\n      content: \"Henry delivered exactly what we needed. Professional, fast, and innovative. Highly recommended!\",\n      rating: \"5.0\",\n      avatarUrl: null,\n      isActive: true,\n      createdAt: new Date(),\n    },\n  ];\n\n  const displayTestimonials = testimonials.length > 0 ? testimonials : defaultTestimonials;\n\n  return (\n    <section id=\"testimonials\" className=\"min-h-screen py-20 snap-section\">\n      <div className=\"container mx-auto px-6\">\n        <AnimatedHeader \n          text=\"TESTIMONIALS\" \n          className=\"text-4xl md:text-5xl lg:text-6xl font-black mb-16 text-center text-primary w-full\"\n          data-testid=\"testimonials-title\"\n        />\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n          {displayTestimonials.map((testimonial) => (\n            <div \n              key={testimonial.id} \n              className=\"bg-card p-8 rounded-2xl brutalist-shadow\"\n              data-testid={`testimonial-${testimonial.id}`}\n            >\n              <div className=\"flex items-center mb-4\">\n                <div className=\"flex text-accent text-xl\">\n                  {[1, 2, 3, 4, 5].map((star) => (\n                    <i \n                      key={star} \n                      className={`fas fa-star ${star <= parseFloat(testimonial.rating || \"5\") ? \"\" : \"opacity-30\"}`}\n                    ></i>\n                  ))}\n                </div>\n              </div>\n              <p className=\"text-muted-foreground mb-6 italic\" data-testid={`testimonial-content-${testimonial.id}`}>\n                \"{testimonial.content}\"\n              </p>\n              <div className=\"flex items-center\">\n                <div className=\"w-12 h-12 bg-primary rounded-full flex items-center justify-center text-primary-foreground font-bold mr-4\">\n                  {testimonial.avatarUrl ? (\n                    <img src={testimonial.avatarUrl} alt={testimonial.name} className=\"w-full h-full rounded-full object-cover\" />\n                  ) : (\n                    testimonial.name.split(' ').map(n => n[0]).join('').toUpperCase()\n                  )}\n                </div>\n                <div>\n                  <h4 className=\"font-bold text-foreground\" data-testid={`testimonial-name-${testimonial.id}`}>\n                    {testimonial.name}\n                  </h4>\n                  <p className=\"text-muted-foreground text-sm\" data-testid={`testimonial-position-${testimonial.id}`}>\n                    {testimonial.position}{testimonial.company && `, ${testimonial.company}`}\n                  </p>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5398},"client/src/components/theme-selector.tsx":{"content":"import React, { useState } from 'react';\nimport { useTheme, type Theme } from '@/contexts/theme-context';\nimport { ChevronDownIcon } from 'lucide-react';\n\nexport default function ThemeSelector() {\n  const { theme, setTheme } = useTheme();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const themes: { value: Theme; label: string; icon: string }[] = [\n    { value: 'light', label: 'Light', icon: '☀️' },\n    { value: 'dark', label: 'Dark', icon: '🌙' },\n    { value: 'blue', label: 'Blue', icon: '🌊' },\n  ];\n\n  const currentTheme = themes.find(t => t.value === theme) || themes[0];\n\n  return (\n    <div className=\"relative\" data-testid=\"theme-selector\">\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"flex items-center gap-2 px-3 py-2 rounded-lg bg-background/50 backdrop-blur-sm border border-border/50 hover:bg-background/80 transition-all\"\n        data-testid=\"theme-selector-button\"\n      >\n        <span className=\"text-sm\">{currentTheme.icon}</span>\n        <span className=\"text-sm font-medium hidden sm:inline\">{currentTheme.label}</span>\n        <ChevronDownIcon className={`w-4 h-4 transition-transform ${isOpen ? 'rotate-180' : ''}`} />\n      </button>\n\n      {isOpen && (\n        <>\n          <div \n            className=\"fixed inset-0 z-10\" \n            onClick={() => setIsOpen(false)}\n          />\n          <div className=\"absolute top-full right-0 mt-2 w-32 bg-background/95 backdrop-blur-md border border-border/50 rounded-lg shadow-lg z-20\">\n            {themes.map((themeOption) => (\n              <button\n                key={themeOption.value}\n                onClick={() => {\n                  setTheme(themeOption.value);\n                  setIsOpen(false);\n                }}\n                className={`w-full flex items-center gap-2 px-3 py-2 text-left hover:bg-primary/10 transition-colors first:rounded-t-lg last:rounded-b-lg ${\n                  theme === themeOption.value ? 'bg-primary/20 text-primary' : ''\n                }`}\n                data-testid={`theme-option-${themeOption.value}`}\n              >\n                <span className=\"text-sm\">{themeOption.icon}</span>\n                <span className=\"text-sm font-medium\">{themeOption.label}</span>\n              </button>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n}","size_bytes":2327},"client/src/contexts/theme-context.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\n\nexport type Theme = 'light' | 'dark' | 'blue';\n\ninterface ThemeContextType {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setTheme] = useState<Theme>('light');\n\n  useEffect(() => {\n    // Load theme from localStorage on mount\n    const savedTheme = localStorage.getItem('theme') as Theme;\n    if (savedTheme && ['light', 'dark', 'blue'].includes(savedTheme)) {\n      setTheme(savedTheme);\n    } else {\n      // Default to light theme if none saved\n      setTheme('light');\n    }\n  }, []);\n\n  useEffect(() => {\n    // Apply theme to document\n    const root = document.documentElement;\n    root.className = theme;\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}","size_bytes":1253},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-scroll-spy.tsx":{"content":"import { useState, useEffect } from \"react\";\n\nexport function useScrollSpy(sectionIds: string[], threshold = 0.5) {\n  const [activeSection, setActiveSection] = useState<string>(sectionIds[0]);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            setActiveSection(entry.target.id);\n          }\n        });\n      },\n      { threshold }\n    );\n\n    sectionIds.forEach((id) => {\n      const element = document.getElementById(id);\n      if (element) {\n        observer.observe(element);\n      }\n    });\n\n    return () => observer.disconnect();\n  }, [sectionIds, threshold]);\n\n  return activeSection;\n}\n","size_bytes":720},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/email.ts":{"content":"// Email service integration for contact form\n// This would integrate with Gmail API or other email service\n\nexport interface ContactFormData {\n  name: string;\n  email: string;\n  projectType?: string;\n  budget?: string;\n  message: string;\n}\n\nexport async function sendContactEmail(data: ContactFormData): Promise<void> {\n  // This would typically integrate with:\n  // 1. Gmail API\n  // 2. SendGrid\n  // 3. Mailgun\n  // 4. Other email service\n  \n  \n  // TODO: Implement actual email sending\n  // For now, this is handled by the backend API endpoint\n}\n","size_bytes":550},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\n// Get API base URL from environment variables\nconst getApiBaseUrl = () => {\n  return import.meta.env.VITE_API_BASE_URL || '';\n};\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const baseUrl = getApiBaseUrl();\n  const fullUrl = url.startsWith('http') ? url : \n    baseUrl.replace(/\\/$/, '') + '/' + url.replace(/^\\//, '');\n  \n  const res = await fetch(fullUrl, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const baseUrl = getApiBaseUrl();\n    const url = queryKey.join(\"/\") as string;\n    const fullUrl = url.startsWith('http') ? url : \n      baseUrl.replace(/\\/$/, '') + '/' + url.replace(/^\\//, '');\n    \n    const res = await fetch(fullUrl, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1853},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/checkout.tsx":{"content":"import React from \"react\";\nimport { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { loadStripe } from '@stripe/stripe-js';\nimport { Elements, PaymentElement, useStripe, useElements } from '@stripe/react-stripe-js';\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport type { App } from \"@shared/schema\";\n\n// Make sure to call `loadStripe` outside of a component's render to avoid\n// recreating the `Stripe` object on every render.\nconst stripePromise = import.meta.env.VITE_STRIPE_PUBLIC_KEY \n  ? loadStripe(import.meta.env.VITE_STRIPE_PUBLIC_KEY)\n  : null;\n\ninterface CheckoutFormProps {\n  app: App;\n  customerInfo: {\n    name: string;\n    email: string;\n  };\n}\n\nconst CheckoutForm = ({ app, customerInfo }: CheckoutFormProps) => {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsProcessing(true);\n\n    if (!stripe || !elements) {\n      setIsProcessing(false);\n      return;\n    }\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: `${window.location.origin}/?payment=success`,\n      },\n    });\n\n    if (error) {\n      toast({\n        title: \"Payment Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    } else {\n      toast({\n        title: \"Payment Successful\",\n        description: `Thank you for purchasing ${app.name}!`,\n      });\n      setLocation(\"/\");\n    }\n    \n    setIsProcessing(false);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-6\" data-testid=\"checkout-form\">\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-semibold text-foreground\">Payment Details</h3>\n        <PaymentElement />\n      </div>\n      \n      <Button \n        type=\"submit\" \n        disabled={!stripe || isProcessing}\n        className=\"w-full bg-primary text-primary-foreground py-3 rounded-lg font-bold text-lg hover:bg-primary/90 transition-colors\"\n        data-testid=\"button-complete-payment\"\n      >\n        {isProcessing ? (\n          <>\n            <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n            Processing Payment...\n          </>\n        ) : (\n          <>\n            <i className=\"fas fa-credit-card mr-2\"></i>\n            Complete Payment - ${app.price}\n          </>\n        )}\n      </Button>\n      \n      <div className=\"text-center text-sm text-muted-foreground\">\n        <p>Secure payment powered by Stripe</p>\n        <p className=\"mt-1\">30-day money-back guarantee</p>\n      </div>\n    </form>\n  );\n};\n\nexport default function Checkout() {\n  const params = useParams();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [clientSecret, setClientSecret] = useState(\"\");\n  const [customerInfo, setCustomerInfo] = useState({\n    name: \"\",\n    email: \"\",\n  });\n\n  const appId = params.appId;\n\n  const { data: app, isLoading: appLoading, error: appError } = useQuery<App>({\n    queryKey: [\"/api/apps\", appId],\n    enabled: !!appId,\n  });\n\n  const createPaymentMutation = useMutation({\n    mutationFn: async (data: { appId: string; customerEmail: string; customerName: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/create-payment-intent\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setClientSecret(data.clientSecret);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Payment Setup Failed\",\n        description: error.message || \"Failed to initialize payment. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    // SEO setup for checkout page\n    document.title = app ? `Checkout - ${app.name} | Henry Peti` : \"Checkout | Henry Peti\";\n  }, [app]);\n\n  const handleCustomerInfoSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!app || !customerInfo.name || !customerInfo.email) return;\n\n    createPaymentMutation.mutate({\n      appId: app.id,\n      customerEmail: customerInfo.email,\n      customerName: customerInfo.name,\n    });\n  };\n\n  if (appLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin w-12 h-12 border-4 border-primary border-t-transparent rounded-full mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading app details...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (appError || !app) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <i className=\"fas fa-exclamation-triangle text-4xl text-destructive mb-4\"></i>\n              <h1 className=\"text-2xl font-bold text-foreground mb-2\">App Not Found</h1>\n              <p className=\"text-muted-foreground mb-6\">\n                The app you're trying to purchase could not be found.\n              </p>\n              <Button onClick={() => setLocation(\"/\")} className=\"bg-primary text-primary-foreground\">\n                Return Home\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!app.isPremium || !app.price) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6\">\n            <div className=\"text-center\">\n              <i className=\"fas fa-info-circle text-4xl text-accent mb-4\"></i>\n              <h1 className=\"text-2xl font-bold text-foreground mb-2\">App Not For Sale</h1>\n              <p className=\"text-muted-foreground mb-6\">\n                This app is not available for purchase.\n              </p>\n              <Button onClick={() => setLocation(\"/\")} className=\"bg-primary text-primary-foreground\">\n                Return Home\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background py-12\">\n      <div className=\"container mx-auto px-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          {/* Header */}\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-black mb-4 text-primary\" data-testid=\"checkout-title\">\n              SECURE CHECKOUT\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Complete your purchase safely and securely\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-2 gap-12\">\n            {/* App Details */}\n            <div>\n              <Card className=\"brutalist-shadow-secondary\">\n                <CardHeader>\n                  <CardTitle className=\"text-2xl text-foreground\">Order Summary</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-6\">\n                    {/* App Image */}\n                    <img \n                      src={app.imageUrl || \"https://images.unsplash.com/photo-1563013544-824ae1b704d3?auto=format&fit=crop&w=400&h=200\"} \n                      alt={`${app.name} preview`}\n                      className=\"w-full h-48 object-cover rounded-lg\"\n                      data-testid=\"checkout-app-image\"\n                    />\n                    \n                    {/* App Info */}\n                    <div>\n                      <h3 className=\"text-xl font-bold text-foreground mb-2\" data-testid=\"checkout-app-name\">\n                        {app.name}\n                      </h3>\n                      <p className=\"text-muted-foreground mb-4\" data-testid=\"checkout-app-description\">\n                        {app.longDescription || app.description}\n                      </p>\n                      \n                      {/* Features */}\n                      {app.features && app.features.length > 0 && (\n                        <div className=\"mb-4\">\n                          <h4 className=\"font-semibold text-foreground mb-2\">What's Included:</h4>\n                          <ul className=\"space-y-1\">\n                            {app.features.map((feature, index) => (\n                              <li key={index} className=\"flex items-center text-sm text-muted-foreground\">\n                                <i className=\"fas fa-check text-accent mr-2\"></i>\n                                {feature}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                      \n                      {/* Technologies */}\n                      {app.technologies && app.technologies.length > 0 && (\n                        <div className=\"flex flex-wrap gap-2\">\n                          {app.technologies.map((tech, index) => (\n                            <span \n                              key={index}\n                              className=\"bg-primary/20 text-primary px-3 py-1 rounded-full text-sm\"\n                            >\n                              {tech}\n                            </span>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                    \n                    <Separator />\n                    \n                    {/* Pricing */}\n                    <div className=\"space-y-2\">\n                      <div className=\"flex justify-between text-lg\">\n                        <span className=\"text-muted-foreground\">Subtotal:</span>\n                        <span className=\"text-foreground\">${app.price}</span>\n                      </div>\n                      <div className=\"flex justify-between text-lg\">\n                        <span className=\"text-muted-foreground\">Tax:</span>\n                        <span className=\"text-foreground\">$0.00</span>\n                      </div>\n                      <Separator />\n                      <div className=\"flex justify-between text-xl font-bold\">\n                        <span className=\"text-foreground\">Total:</span>\n                        <span className=\"text-primary\" data-testid=\"checkout-total-price\">${app.price}</span>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Payment Form */}\n            <div>\n              <Card className=\"brutalist-shadow\">\n                <CardHeader>\n                  <CardTitle className=\"text-2xl text-foreground\">Payment Information</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {!clientSecret ? (\n                    // Customer Information Form\n                    <form onSubmit={handleCustomerInfoSubmit} className=\"space-y-6\" data-testid=\"customer-info-form\">\n                      <div>\n                        <label className=\"block text-sm font-bold text-foreground mb-2\">Full Name *</label>\n                        <Input\n                          type=\"text\"\n                          value={customerInfo.name}\n                          onChange={(e) => setCustomerInfo(prev => ({ ...prev, name: e.target.value }))}\n                          required\n                          placeholder=\"Enter your full name\"\n                          className=\"bg-input border-border\"\n                          data-testid=\"input-customer-name\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <label className=\"block text-sm font-bold text-foreground mb-2\">Email Address *</label>\n                        <Input\n                          type=\"email\"\n                          value={customerInfo.email}\n                          onChange={(e) => setCustomerInfo(prev => ({ ...prev, email: e.target.value }))}\n                          required\n                          placeholder=\"Enter your email address\"\n                          className=\"bg-input border-border\"\n                          data-testid=\"input-customer-email\"\n                        />\n                        <p className=\"text-xs text-muted-foreground mt-1\">\n                          You'll receive purchase confirmation and app access details at this email.\n                        </p>\n                      </div>\n                      \n                      <Button \n                        type=\"submit\" \n                        disabled={createPaymentMutation.isPending || !customerInfo.name || !customerInfo.email}\n                        className=\"w-full bg-secondary text-secondary-foreground py-3 rounded-lg font-bold text-lg hover:bg-secondary/90 transition-colors\"\n                        data-testid=\"button-continue-payment\"\n                      >\n                        {createPaymentMutation.isPending ? (\n                          <>\n                            <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                            Setting up payment...\n                          </>\n                        ) : (\n                          <>\n                            <i className=\"fas fa-arrow-right mr-2\"></i>\n                            Continue to Payment\n                          </>\n                        )}\n                      </Button>\n                    </form>\n                  ) : stripePromise ? (\n                    // Stripe Payment Form\n                    <Elements stripe={stripePromise} options={{ clientSecret }}>\n                      <CheckoutForm app={app} customerInfo={customerInfo} />\n                    </Elements>\n                  ) : (\n                    // Payment system not configured\n                    <div className=\"text-center py-12\">\n                      <i className=\"fas fa-credit-card text-4xl text-muted-foreground mb-4\"></i>\n                      <h3 className=\"text-xl font-bold text-foreground mb-4\">Payment System Setup Required</h3>\n                      <p className=\"text-muted-foreground mb-6\">\n                        Payment processing is currently being configured. Please check back soon or contact support.\n                      </p>\n                      <Button onClick={() => setLocation(\"/\")} className=\"bg-primary text-primary-foreground\">\n                        Return Home\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n              \n              {/* Security Badges */}\n              <div className=\"mt-6 text-center\">\n                <div className=\"flex justify-center items-center space-x-4 mb-4\">\n                  <i className=\"fas fa-shield-alt text-accent text-2xl\"></i>\n                  <span className=\"text-sm text-muted-foreground\">256-bit SSL Encryption</span>\n                </div>\n                <div className=\"flex justify-center space-x-6 text-2xl text-muted-foreground\">\n                  <i className=\"fab fa-cc-visa\" title=\"Visa\"></i>\n                  <i className=\"fab fa-cc-mastercard\" title=\"Mastercard\"></i>\n                  <i className=\"fab fa-cc-amex\" title=\"American Express\"></i>\n                  <i className=\"fab fa-paypal\" title=\"PayPal\"></i>\n                  <i className=\"fab fa-apple-pay\" title=\"Apple Pay\"></i>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Back to Store */}\n          <div className=\"text-center mt-12\">\n            <Button \n              onClick={() => setLocation(\"/#store\")}\n              variant=\"outline\"\n              className=\"border-border text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-back-to-store\"\n            >\n              <i className=\"fas fa-arrow-left mr-2\"></i>\n              Back to Store\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16456},"client/src/pages/home.tsx":{"content":"import React from 'react';\nimport { useEffect, useState } from \"react\";\nimport CustomCursor from \"@/components/custom-cursor\";\nimport NavigationDots from \"@/components/navigation-dots\";\nimport HeroSection from \"@/components/hero-section\";\nimport AboutSection from \"@/components/about-section\";\nimport AppsShowcase from \"@/components/apps-showcase\";\nimport PremiumStore from \"@/components/premium-store\";\nimport Testimonials from \"@/components/testimonials\";\nimport ContactSection from \"@/components/contact-section\";\nimport ThemeSelector from \"@/components/theme-selector\";\nimport zigzagLogoTshirt from \"@assets/logo-t-shirt-zig-zag_1758166586152.png\";\nimport zigzagLogoRedBlack from \"@assets/zigzag_redBlack_1758166406884.png\";\nimport newDarkLogo from \"@assets/zig-zag-man-black-bg_1758180362731.jpg\";\nimport { useTheme } from \"@/contexts/theme-context\";\n\nexport default function Home() {\n  const { theme } = useTheme();\n  const [isTypingComplete, setIsTypingComplete] = useState(false);\n  \n  // Select appropriate navbar logo asset based on theme\n  const getNavbarLogoAsset = () => {\n    if (theme === 'light') {\n      return zigzagLogoRedBlack; // Red/black version for light theme\n    } else if (theme === 'dark') {\n      return newDarkLogo; // New dark mode logo\n    } else { // blue theme\n      return newDarkLogo; // Same logo as dark mode\n    }\n  };\n  \n  useEffect(() => {\n    // SEO and document setup\n    document.title = \"ZIGZAG APPS - Henry Peti | Modern App Developer & Entrepreneur | Portfolio & App Store\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'ZIGZAG APPS by Henry Peti - Software Engineer, App Developer & Entrepreneur. Discover cutting-edge mobile apps, web applications, and digital solutions. Buy premium apps and explore innovative development projects.');\n    }\n  }, []);\n  \n  const handleTypingComplete = (isComplete: boolean) => {\n    setIsTypingComplete(isComplete);\n  };\n\n  return (\n    <div className=\"scroll-snap\">\n      <CustomCursor />\n      <NavigationDots />\n      \n      {/* Header */}\n      <header className=\"fixed top-0 left-0 right-0 z-50 backdrop-blur-md bg-background/80 border-b border-border\">\n        <nav className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"flex items-center h-12\" data-testid=\"logo\">\n              <img \n                src={getNavbarLogoAsset()} \n                alt=\"ZigZag Logo\" \n                className=\"h-full w-auto object-contain\"\n                style={{ imageRendering: 'crisp-edges' }}\n              />\n            </div>\n            <div className=\"hidden md:flex space-x-8\">\n              <a href=\"#about\" className=\"hover:text-primary transition-colors\" data-testid=\"nav-about\">About</a>\n              <a href=\"#apps\" className=\"hover:text-primary transition-colors\" data-testid=\"nav-apps\">Apps</a>\n              <a href=\"#store\" className=\"hover:text-primary transition-colors\" data-testid=\"nav-store\">Store</a>\n              <a href=\"#contact\" className=\"hover:text-primary transition-colors\" data-testid=\"nav-contact\">Contact</a>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <ThemeSelector />\n              <a href=\"https://github.com/gadgetboy27\" className=\"text-muted-foreground hover:text-primary transition-colors p-2 hover:bg-primary/10 rounded-lg\" data-testid=\"link-github\">\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                  <path fillRule=\"evenodd\" d=\"M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z\" clipRule=\"evenodd\" />\n                </svg>\n              </a>\n              <a href=\"https://linkedin.com/in/henrypeti\" className=\"text-muted-foreground hover:text-primary transition-colors p-2 hover:bg-primary/10 rounded-lg\" data-testid=\"link-linkedin\">\n                <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 24 24\" aria-hidden=\"true\">\n                  <path d=\"M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z\"/>\n                </svg>\n              </a>\n            </div>\n          </div>\n        </nav>\n      </header>\n\n      <HeroSection onTypingComplete={handleTypingComplete} />\n      <AboutSection />\n      <AppsShowcase />\n      <PremiumStore />\n      <Testimonials />\n      <ContactSection />\n\n      {/* Footer */}\n      <footer className=\"py-12 border-t border-border\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gradient font-mono mb-4\">ZIGZAG APPS</div>\n            <p className=\"text-muted-foreground mb-6\">Building the future, one app at a time.</p>\n            <div className=\"flex justify-center space-x-6 mb-6\">\n              <a href=\"#apps\" className=\"text-muted-foreground hover:text-primary transition-colors\">Apps</a>\n              <a href=\"#store\" className=\"text-muted-foreground hover:text-primary transition-colors\">Store</a>\n              <a href=\"#contact\" className=\"text-muted-foreground hover:text-primary transition-colors\">Contact</a>\n              <a href=\"/privacy\" className=\"text-muted-foreground hover:text-primary transition-colors\">Privacy</a>\n              <a href=\"/terms\" className=\"text-muted-foreground hover:text-primary transition-colors\">Terms</a>\n            </div>\n            <p className=\"text-muted-foreground text-sm\">© 2025 zigzagapps. All rights reserved.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":6728},"client/src/pages/not-found.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":738},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"\"use client\"\n\nimport React, { createContext, useContext, useState, useCallback } from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport { cn } from \"@/lib/utils\"\n\n// Simple toast implementation without Radix to avoid preamble issues\ninterface Toast {\n  id: string\n  title?: string\n  description?: string\n  variant?: \"default\" | \"destructive\"\n}\n\ninterface ToastContextType {\n  toasts: Toast[]\n  toast: (toast: Omit<Toast, \"id\">) => void\n  dismiss: (id: string) => void\n}\n\nconst ToastContext = createContext<ToastContextType | undefined>(undefined)\n\nexport function ToastProvider({ children }: { children: React.ReactNode }) {\n  const [toasts, setToasts] = useState<Toast[]>([])\n\n  const toast = useCallback((toast: Omit<Toast, \"id\">) => {\n    const id = Math.random().toString(36).substr(2, 9)\n    setToasts((prev) => [...prev, { ...toast, id }])\n    \n    // Auto dismiss after 5 seconds\n    setTimeout(() => {\n      setToasts((prev) => prev.filter((t) => t.id !== id))\n    }, 5000)\n  }, [])\n\n  const dismiss = useCallback((id: string) => {\n    setToasts((prev) => prev.filter((t) => t.id !== id))\n  }, [])\n\n  return (\n    <ToastContext.Provider value={{ toasts, toast, dismiss }}>\n      {children}\n      <div className=\"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\">\n        {toasts.map((toast) => (\n          <div\n            key={toast.id}\n            className={cn(\n              \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all\",\n              \"animate-in slide-in-from-bottom-full duration-300\",\n              toast.variant === \"destructive\"\n                ? \"border-destructive bg-destructive text-destructive-foreground\"\n                : \"border bg-background text-foreground\"\n            )}\n          >\n            <div className=\"grid gap-1\">\n              {toast.title && (\n                <div className=\"text-sm font-semibold\">{toast.title}</div>\n              )}\n              {toast.description && (\n                <div className=\"text-sm opacity-90\">{toast.description}</div>\n              )}\n            </div>\n            <button\n              onClick={() => dismiss(toast.id)}\n              className=\"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100\"\n            >\n              <X className=\"h-4 w-4\" />\n            </button>\n          </div>\n        ))}\n      </div>\n    </ToastContext.Provider>\n  )\n}\n\nexport function useToast() {\n  const context = useContext(ToastContext)\n  if (context === undefined) {\n    throw new Error(\"useToast must be used within a ToastProvider\")\n  }\n  return context\n}\n\n// Legacy exports for compatibility with shadcn/ui\nexport const Toast = ({ children }: { children?: React.ReactNode }) => null\nexport const ToastAction = ({ children }: { children?: React.ReactNode }) => null\nexport const ToastClose = ({ children }: { children?: React.ReactNode }) => null\nexport const ToastTitle = ({ children }: { children?: React.ReactNode }) => null\nexport const ToastDescription = ({ children }: { children?: React.ReactNode }) => null\nexport const ToastViewport = ({ children }: { children?: React.ReactNode }) => null\n\nexport type ToastProps = any\nexport type ToastActionElement = any","size_bytes":3518},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"DEPLOYMENT.md":{"content":"# Netlify Deployment Guide\n\n## 🚀 Deploy Your Portfolio to Netlify\n\n### Step 1: Prepare Your Backend\nYour backend will stay hosted on Replit (or move it to Railway/Vercel). Get your backend URL:\n- **Replit**: `https://your-repl-name.your-username.replit.dev`\n- **Railway**: `https://your-app.up.railway.app`\n- **Vercel**: `https://your-app.vercel.app`\n\n**IMPORTANT**: The backend has been updated with CORS configuration to allow Netlify domains. If you see CORS errors after deployment, make sure your backend is running the updated code.\n\n### Step 2: Update Environment Variables\n1. Edit `client/.env.production` with your backend URL:\n```\nVITE_API_BASE_URL=https://your-backend-url.com\nVITE_STRIPE_PUBLIC_KEY=pk_live_your_stripe_key\nVITE_GA_MEASUREMENT_ID=G-YOUR_GA_ID\n```\n\n### Step 3: Build Configuration\n✅ **No manual setup needed!** The netlify.toml is configured to use `npx vite build` directly.\n\nThe build will:\n- Use Node.js 20 (specified in .nvmrc)\n- Build to `dist/public/` directory\n- Handle SPA routing automatically\n\n### Step 4: Deploy to Netlify\n1. **Push code to GitHub** (if not already there)\n2. **Connect to Netlify**:\n   - Go to https://netlify.com\n   - Click \"New site from Git\"\n   - Connect your GitHub repo\n3. **Configure build settings** (auto-detected from netlify.toml):\n   - Build command: `npx vite build` ✅ (automatically configured)\n   - Publish directory: `dist/public` ✅ (automatically configured)\n   - Node version: 20 ✅ (from .nvmrc)\n\n### Step 5: Set Environment Variables in Netlify\nIn Netlify dashboard → Site settings → Environment variables:\n- `VITE_API_BASE_URL`: Your backend URL\n- `VITE_STRIPE_PUBLIC_KEY`: Your Stripe public key  \n- `VITE_GA_MEASUREMENT_ID`: Your Google Analytics ID\n\n**IMPORTANT**: Also add to your **backend** environment:\n- `ALLOWED_NETLIFY_ORIGINS`: Your exact Netlify site URL (e.g., `https://your-site.netlify.app`)\n\n### Step 6: Test & Deploy\n- Netlify will auto-deploy on git pushes\n- Test all functionality (contact form, payments, etc.)\n\n## 📁 Files Created for Deployment\n- `netlify.toml` - Main Netlify configuration with build settings and SPA routing\n- `.nvmrc` - Node.js version specification (v20)\n- `client/.env.production` - Production environment template\n- Updated `client/src/lib/queryClient.ts` - API URL handling with proper concatenation\n- Updated `server/routes.ts` - CORS configuration for secure cross-origin requests\n\n## 🔧 Backend Hosting Options\n**Keep backend on Replit** (easiest):\n- Already configured and working\n- Just use your Replit app URL\n\n**Or move to Railway** (recommended):\n- Better performance for production\n- Easy database migration\n- Custom domains\n\n**Or move to Vercel**:\n- Serverless functions\n- Good for simple APIs","size_bytes":2742},"netlify.toml":{"content":"[build]\n  publish = \"dist/public\"\n  command = \"npx vite build\"\n\n[build.environment]\n  NODE_VERSION = \"20\"\n\n[[redirects]]\n  from = \"/*\"\n  to = \"/index.html\"\n  status = 200\n\n[[headers]]\n  for = \"/*\"\n  [headers.values]\n    X-Frame-Options = \"DENY\"\n    X-Content-Type-Options = \"nosniff\"\n    Referrer-Policy = \"strict-origin-when-cross-origin\"\n    Permissions-Policy = \"camera=(), microphone=(), geolocation=()\"\n\n[[headers]]\n  for = \"/assets/*\"\n  [headers.values]\n    Cache-Control = \"public, max-age=31536000, immutable\"","size_bytes":517},"client/src/pages/privacy.tsx":{"content":"import { useEffect } from \"react\";\n\nexport default function PrivacyPolicy() {\n  useEffect(() => {\n    // SEO setup\n    document.title = \"Privacy Policy - ZIGZAG APPS | Henry Peti\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Privacy Policy for ZIGZAG APPS by Henry Peti. Learn how we collect, use, and protect your personal information when using our services.');\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen pt-20 pb-12\">\n      {/* Fixed Header */}\n      <header className=\"fixed top-0 left-0 right-0 z-50 backdrop-blur-md bg-background/80 border-b border-border\">\n        <nav className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex justify-between items-center\">\n            <a href=\"/\" className=\"text-xl font-bold text-primary font-mono\" data-testid=\"logo\">\n              <span className=\"text-gradient\">ZIGZAG APPS</span>\n            </a>\n            <a href=\"/\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"back-home\">\n              ← Back to Home\n            </a>\n          </div>\n        </nav>\n      </header>\n\n      <div className=\"container mx-auto px-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-4xl md:text-5xl font-black mb-8 text-center text-primary\" data-testid=\"privacy-title\">\n            Privacy Policy\n          </h1>\n          \n          <div className=\"bg-card p-8 rounded-2xl brutalist-shadow prose prose-lg max-w-none\">\n            <p className=\"text-muted-foreground mb-6\">\n              <strong>Last updated:</strong> {new Date().toLocaleDateString()}\n            </p>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Information We Collect</h2>\n              <p className=\"text-muted-foreground mb-4\">\n                When you use ZIGZAG APPS services, we may collect the following types of information:\n              </p>\n              <ul className=\"list-disc pl-6 text-muted-foreground space-y-2\">\n                <li>Personal information you provide (name, email, phone number)</li>\n                <li>Technical information about your device and browser</li>\n                <li>Usage data and analytics about how you interact with our apps</li>\n                <li>Payment information when purchasing premium apps</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">How We Use Your Information</h2>\n              <p className=\"text-muted-foreground mb-4\">\n                We use the collected information to:\n              </p>\n              <ul className=\"list-disc pl-6 text-muted-foreground space-y-2\">\n                <li>Provide and improve our services</li>\n                <li>Process payments and fulfill orders</li>\n                <li>Send important updates and notifications</li>\n                <li>Analyze usage patterns to enhance user experience</li>\n                <li>Respond to customer support inquiries</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Data Protection</h2>\n              <p className=\"text-muted-foreground mb-4\">\n                We implement appropriate security measures to protect your personal information:\n              </p>\n              <ul className=\"list-disc pl-6 text-muted-foreground space-y-2\">\n                <li>Encrypted data transmission and storage</li>\n                <li>Regular security audits and updates</li>\n                <li>Limited access to personal information</li>\n                <li>Secure payment processing through trusted providers</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Third-Party Services</h2>\n              <p className=\"text-muted-foreground mb-4\">\n                We may use third-party services including:\n              </p>\n              <ul className=\"list-disc pl-6 text-muted-foreground space-y-2\">\n                <li>Payment processors (Stripe) for secure transactions</li>\n                <li>Analytics services to understand user behavior</li>\n                <li>Email services for communications</li>\n                <li>Cloud hosting providers for reliable service delivery</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Your Rights</h2>\n              <p className=\"text-muted-foreground mb-4\">\n                You have the right to:\n              </p>\n              <ul className=\"list-disc pl-6 text-muted-foreground space-y-2\">\n                <li>Access and review your personal information</li>\n                <li>Request corrections to inaccurate data</li>\n                <li>Request deletion of your personal information</li>\n                <li>Opt-out of marketing communications</li>\n                <li>Data portability where technically feasible</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Contact Us</h2>\n              <p className=\"text-muted-foreground\">\n                If you have questions about this Privacy Policy or your personal information, please contact us:\n              </p>\n              <div className=\"mt-4 text-muted-foreground\">\n                <p><strong>Email:</strong> henrypeti.dev@gmail.com</p>\n                <p><strong>Phone:</strong> 021 853579</p>\n                <p><strong>Address:</strong> 21/3 Inanga Street, Hobsonville, Auckland NZ</p>\n              </div>\n            </section>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5960},"client/src/pages/terms.tsx":{"content":"import { useEffect } from \"react\";\n\nexport default function TermsOfService() {\n  useEffect(() => {\n    // SEO setup\n    document.title = \"Terms of Service - ZIGZAG APPS | Henry Peti\";\n    \n    const metaDescription = document.querySelector('meta[name=\"description\"]');\n    if (metaDescription) {\n      metaDescription.setAttribute('content', 'Terms of Service for ZIGZAG APPS by Henry Peti. Read our terms and conditions for using our applications and services.');\n    }\n  }, []);\n\n  return (\n    <div className=\"min-h-screen pt-20 pb-12\">\n      {/* Fixed Header */}\n      <header className=\"fixed top-0 left-0 right-0 z-50 backdrop-blur-md bg-background/80 border-b border-border\">\n        <nav className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex justify-between items-center\">\n            <a href=\"/\" className=\"text-xl font-bold text-primary font-mono\" data-testid=\"logo\">\n              <span className=\"text-gradient\">ZIGZAG APPS</span>\n            </a>\n            <a href=\"/\" className=\"text-muted-foreground hover:text-primary transition-colors\" data-testid=\"back-home\">\n              ← Back to Home\n            </a>\n          </div>\n        </nav>\n      </header>\n\n      <div className=\"container mx-auto px-6\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h1 className=\"text-4xl md:text-5xl font-black mb-8 text-center text-primary\" data-testid=\"terms-title\">\n            Terms of Service\n          </h1>\n          \n          <div className=\"bg-card p-8 rounded-2xl brutalist-shadow prose prose-lg max-w-none\">\n            <p className=\"text-muted-foreground mb-6\">\n              <strong>Last updated:</strong> {new Date().toLocaleDateString()}\n            </p>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Acceptance of Terms</h2>\n              <p className=\"text-muted-foreground mb-4\">\n                By accessing or using ZIGZAG APPS services, you agree to be bound by these Terms of Service. \n                If you do not agree to these terms, please do not use our services.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Services Description</h2>\n              <p className=\"text-muted-foreground mb-4\">\n                ZIGZAG APPS provides:\n              </p>\n              <ul className=\"list-disc pl-6 text-muted-foreground space-y-2\">\n                <li>Custom software development services</li>\n                <li>Mobile and web application development</li>\n                <li>Premium applications for purchase</li>\n                <li>Technical consulting and support</li>\n                <li>Digital solutions and platforms</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">User Responsibilities</h2>\n              <p className=\"text-muted-foreground mb-4\">\n                As a user of our services, you agree to:\n              </p>\n              <ul className=\"list-disc pl-6 text-muted-foreground space-y-2\">\n                <li>Provide accurate and complete information</li>\n                <li>Use our services for lawful purposes only</li>\n                <li>Respect intellectual property rights</li>\n                <li>Not attempt to circumvent security measures</li>\n                <li>Report any bugs or security issues responsibly</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Payment and Refunds</h2>\n              <p className=\"text-muted-foreground mb-4\">\n                For premium applications and services:\n              </p>\n              <ul className=\"list-disc pl-6 text-muted-foreground space-y-2\">\n                <li>All payments are processed securely through Stripe</li>\n                <li>Prices are subject to change with notice</li>\n                <li>Refunds are handled on a case-by-case basis</li>\n                <li>Digital products are delivered immediately upon payment</li>\n                <li>Subscription services can be cancelled at any time</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Intellectual Property</h2>\n              <p className=\"text-muted-foreground mb-4\">\n                All content, code, and materials provided by ZIGZAG APPS are protected by intellectual property rights:\n              </p>\n              <ul className=\"list-disc pl-6 text-muted-foreground space-y-2\">\n                <li>Source code and applications remain the property of Henry Peti</li>\n                <li>Users receive licenses to use purchased applications</li>\n                <li>Reverse engineering or redistribution is prohibited</li>\n                <li>Custom work ownership terms are specified in individual contracts</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Service Availability</h2>\n              <p className=\"text-muted-foreground mb-4\">\n                We strive to maintain high service availability but:\n              </p>\n              <ul className=\"list-disc pl-6 text-muted-foreground space-y-2\">\n                <li>Services may be temporarily unavailable for maintenance</li>\n                <li>We do not guarantee 100% uptime</li>\n                <li>Critical updates may require service interruptions</li>\n                <li>Users will be notified of planned maintenance when possible</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Limitation of Liability</h2>\n              <p className=\"text-muted-foreground mb-4\">\n                To the maximum extent permitted by law:\n              </p>\n              <ul className=\"list-disc pl-6 text-muted-foreground space-y-2\">\n                <li>ZIGZAG APPS is not liable for indirect or consequential damages</li>\n                <li>Our liability is limited to the amount paid for services</li>\n                <li>Users assume responsibility for their use of our applications</li>\n                <li>We provide services \"as is\" without warranties</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Termination</h2>\n              <p className=\"text-muted-foreground mb-4\">\n                These terms remain in effect until terminated:\n              </p>\n              <ul className=\"list-disc pl-6 text-muted-foreground space-y-2\">\n                <li>Users may discontinue use of services at any time</li>\n                <li>We may suspend or terminate access for violations</li>\n                <li>Data retention policies apply after termination</li>\n                <li>Some provisions survive termination</li>\n              </ul>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Changes to Terms</h2>\n              <p className=\"text-muted-foreground mb-4\">\n                We may update these terms periodically. Continued use of our services after changes constitutes acceptance of the new terms.\n              </p>\n            </section>\n\n            <section className=\"mb-8\">\n              <h2 className=\"text-2xl font-bold text-foreground mb-4\">Contact Information</h2>\n              <p className=\"text-muted-foreground\">\n                For questions about these Terms of Service, please contact us:\n              </p>\n              <div className=\"mt-4 text-muted-foreground\">\n                <p><strong>Email:</strong> henrypeti.dev@gmail.com</p>\n                <p><strong>Phone:</strong> 021 853579</p>\n                <p><strong>Address:</strong> 21/3 Inanga Street, Hobsonville, Auckland NZ</p>\n              </div>\n            </section>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":8212},"server/seed.ts":{"content":"#!/usr/bin/env tsx\n\nimport { pool, db } from \"./db\";\nimport { apps, testimonials } from \"@shared/schema\";\nimport { eq, sql } from \"drizzle-orm\";\nimport type { InsertApp, InsertTestimonial } from \"@shared/schema\";\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\n\n// Legitimate Replit apps data - Only legitimate apps with real demo URLs\nconst sampleApps: InsertApp[] = [\n  {\n    name: \"Asset Timer\",\n    description: \"Market timing dashboard for Gold, Bitcoin, stocks, and commodities\",\n    longDescription: \"A comprehensive market timing tool that tracks historical cycles for major asset classes including Gold, Bitcoin, S&P 500, real estate, and oil. Features real-time price data, cycle analysis, seasonal patterns, and strategic buy/sell signals based on historical market behavior.\",\n    price: null,\n    category: \"web\",\n    imageUrl: \"https://images.unsplash.com/photo-1611974789855-9c2a0a7236a3?auto=format&fit=crop&w=800&h=400\",\n    demoUrl: \"https://asset-timer.replit.app\",\n    githubUrl: \"\",\n    technologies: [\"React\", \"TypeScript\", \"Financial APIs\", \"Chart.js\", \"Market Data\"],\n    features: [\n      \"Real-time market data\",\n      \"Historical cycle analysis\",\n      \"Gold & Bitcoin timing\",\n      \"Seasonal patterns\",\n      \"Buy/sell signals\",\n      \"Multi-asset tracking\",\n      \"Investment calendar\",\n      \"Risk assessment\"\n    ],\n    isPremium: false,\n    isActive: true\n  },\n  {\n    name: \"Stockmentor\",\n    description: \"High-performance S&P 500 stock screener with real-time analysis\",\n    longDescription: \"A comprehensive finance scanner built with Python and Streamlit that provides fast technical and fundamental analysis for S&P 500 stocks. Features parallel processing for analyzing up to 50 stocks simultaneously, AI-powered scoring, BUY/WAIT/SELL signals, and real-time data from Yahoo Finance APIs.\",\n    price: null,\n    category: \"web\",\n    imageUrl: \"https://images.unsplash.com/photo-1590283603385-17ffb3a7f29f?auto=format&fit=crop&w=800&h=400\",\n    demoUrl: \"https://stock-compass-gadgetboy27.replit.app\",\n    githubUrl: \"\",\n    technologies: [\"Python\", \"Streamlit\", \"Yahoo Finance API\", \"Real-time Data\", \"ThreadPoolExecutor\"],\n    features: [\n      \"V-Score valuation metrics\",\n      \"Momentum indicators (RSI, MACD)\",\n      \"Quality metrics (ROE, margins)\",\n      \"Risk assessment\",\n      \"AI-powered scoring\",\n      \"Parallel processing\",\n      \"Export to CSV\",\n      \"Sector analysis\"\n    ],\n    isPremium: false,\n    isActive: true\n  },\n  {\n    name: \"AI Stock Picker\",\n    description: \"AI-powered stock analysis and investment recommendation platform\",\n    longDescription: \"Advanced artificial intelligence platform that analyzes market trends, financial data, and trading patterns to provide intelligent stock picking recommendations. Features machine learning algorithms for predictive analysis and automated investment insights.\",\n    price: null,\n    category: \"mobile\",\n    imageUrl: \"https://images.unsplash.com/photo-1551288049-bebda4e38f71?auto=format&fit=crop&w=800&h=400\",\n    demoUrl: \"https://mobile-invest-gadgetboy27.replit.app\",\n    githubUrl: \"\",\n    technologies: [\"AI/ML\", \"Python\", \"Real-time Data\", \"Predictive Analytics\", \"Mobile-First\"],\n    features: [\n      \"AI stock analysis\",\n      \"Market trend prediction\",\n      \"Investment recommendations\",\n      \"Risk assessment\",\n      \"Portfolio optimization\",\n      \"Real-time alerts\",\n      \"Mobile responsive\"\n    ],\n    isPremium: false,\n    isActive: true\n  },\n  {\n    name: \"Dev Tools Suite\",\n    description: \"Collection of developer productivity tools\",\n    longDescription: \"A comprehensive suite of tools for developers including JSON formatter, base64 encoder/decoder, regex tester, and color palette generator. All tools work offline.\",\n    price: null,\n    category: \"web\",\n    imageUrl: \"https://images.unsplash.com/photo-1555066931-4365d14bab8c?auto=format&fit=crop&w=800&h=400\",\n    demoUrl: \"https://devtools.henrypeti.dev\",\n    githubUrl: \"https://github.com/gadgetboy27/dev-tools-suite\",\n    technologies: [\"Vanilla JavaScript\", \"CSS3\", \"Web APIs\", \"Service Workers\"],\n    features: [\n      \"JSON formatter\",\n      \"Base64 encoder\",\n      \"Regex tester\",\n      \"Color tools\",\n      \"Works offline\"\n    ],\n    isPremium: false,\n    isActive: true\n  },\n  {\n    name: \"www.electrifiedgarage.net\",\n    description: \"E-commerce platform for the latest tech gadgets and accessories\",\n    longDescription: \"A modern e-commerce application built for tech enthusiasts to discover and purchase the latest gadgets, electronics, and accessories. Features product catalog browsing, shopping cart functionality, secure payment processing, and user reviews.\",\n    price: null,\n    category: \"web\",\n    imageUrl: \"https://images.unsplash.com/photo-1441986300917-64674bd600d8?auto=format&fit=crop&w=800&h=400\",\n    demoUrl: \"https://electrifiedgarage.net\",\n    githubUrl: \"https://github.com/gadgetboy27/GadgetStore\",\n    technologies: [\"React\", \"TypeScript\", \"E-commerce\", \"Payment Processing\", \"Database\"],\n    features: [\n      \"Product catalog\",\n      \"Shopping cart\",\n      \"User authentication\",\n      \"Payment integration\",\n      \"Product reviews\",\n      \"Inventory management\",\n      \"Order tracking\",\n      \"Mobile responsive\"\n    ],\n    isPremium: false,\n    isActive: true\n  }\n];\n\n// Legitimate testimonials data - General testimonials about Henry's work\nconst sampleTestimonials: InsertTestimonial[] = [\n  {\n    name: \"Sarah Chen\",\n    company: \"TechFlow Inc.\",\n    position: \"Project Manager\",\n    content: \"Henry delivered an exceptional mobile app that exceeded our expectations. His attention to detail and technical expertise made our project a huge success!\",\n    rating: \"5.0\",\n    avatarUrl: \"https://images.unsplash.com/photo-1494790108755-2616b612b786?auto=format&fit=crop&w=200&h=200\",\n    isActive: true\n  },\n  {\n    name: \"Marcus Rodriguez\",\n    company: \"StartupLab\",\n    position: \"CTO\",\n    content: \"Working with Henry was fantastic. He understood our complex requirements and delivered a robust solution on time and within budget.\",\n    rating: \"5.0\",\n    avatarUrl: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?auto=format&fit=crop&w=200&h=200\",\n    isActive: true\n  },\n  {\n    name: \"Emily Johnson\",\n    company: \"DesignCo\",\n    position: \"Creative Director\",\n    content: \"Henry's web development skills are outstanding. The portfolio website he built for us has significantly improved our client acquisition rate.\",\n    rating: \"5.0\",\n    avatarUrl: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?auto=format&fit=crop&w=200&h=200\",\n    isActive: true\n  },\n  {\n    name: \"David Kim\",\n    company: \"DataDriven Solutions\",\n    position: \"Lead Analyst\",\n    content: \"The analytics dashboard Henry built transformed how we visualize our data. Clean code, beautiful UI, and powerful functionality.\",\n    rating: \"5.0\",\n    avatarUrl: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?auto=format&fit=crop&w=200&h=200\",\n    isActive: true\n  },\n  {\n    name: \"Lisa Thompson\",\n    company: \"EcoTech Ventures\",\n    position: \"Product Manager\",\n    content: \"Henry's project management app helped us streamline our entire workflow. The AI features are incredibly useful for planning and resource allocation.\",\n    rating: \"4.9\",\n    avatarUrl: \"https://images.unsplash.com/photo-1544725176-7c40e5a71c5e?auto=format&fit=crop&w=200&h=200\",\n    isActive: true\n  }\n];\n\nasync function upsertApp(appData: InsertApp): Promise<void> {\n  try {\n    // Check if app with the same name already exists\n    const existing = await db\n      .select({ id: apps.id })\n      .from(apps)\n      .where(eq(apps.name, appData.name))\n      .limit(1);\n\n    if (existing.length > 0) {\n      // Update existing app\n      await db\n        .update(apps)\n        .set({\n          ...(appData as any),\n          updatedAt: sql`NOW()`\n        })\n        .where(eq(apps.id, existing[0].id));\n      console.log(`✅ Updated app: ${appData.name}`);\n    } else {\n      // Insert new app\n      await db.insert(apps).values(appData as any);\n      console.log(`✅ Created app: ${appData.name}`);\n    }\n  } catch (error) {\n    console.error(`❌ Error upserting app ${appData.name}:`, error);\n    throw error;\n  }\n}\n\nasync function upsertTestimonial(testimonialData: InsertTestimonial): Promise<void> {\n  try {\n    // Check if testimonial with the same name and company already exists\n    const existing = await db\n      .select({ id: testimonials.id })\n      .from(testimonials)\n      .where(\n        sql`${testimonials.name} = ${testimonialData.name} AND ${testimonials.company} = ${testimonialData.company}`\n      )\n      .limit(1);\n\n    if (existing.length > 0) {\n      // Update existing testimonial\n      await db\n        .update(testimonials)\n        .set(testimonialData)\n        .where(eq(testimonials.id, existing[0].id));\n      console.log(`✅ Updated testimonial: ${testimonialData.name} from ${testimonialData.company}`);\n    } else {\n      // Insert new testimonial\n      await db.insert(testimonials).values(testimonialData as any);\n      console.log(`✅ Created testimonial: ${testimonialData.name} from ${testimonialData.company}`);\n    }\n  } catch (error) {\n    console.error(`❌ Error upserting testimonial ${testimonialData.name}:`, error);\n    throw error;\n  }\n}\n\nasync function seedDatabase(): Promise<void> {\n  console.log(\"🚀 Starting database seeding...\");\n  \n  try {\n    console.log(\"\\n📱 Seeding apps...\");\n    for (const appData of sampleApps) {\n      await upsertApp(appData);\n    }\n    \n    console.log(\"\\n💬 Seeding testimonials...\");\n    for (const testimonialData of sampleTestimonials) {\n      await upsertTestimonial(testimonialData);\n    }\n    \n    console.log(\"\\n✨ Database seeding completed successfully!\");\n    console.log(`📊 Seeded ${sampleApps.length} apps and ${sampleTestimonials.length} testimonials`);\n    \n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n    process.exit(1);\n  }\n}\n\n// Run the seed script when executed directly\n// Check if this file is being run directly (ES module way)\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nif (process.argv[1] === __filename) {\n  seedDatabase()\n    .then(() => {\n      console.log(\"🎉 Seeding process completed!\");\n      process.exit(0);\n    })\n    .catch((error) => {\n      console.error(\"💥 Seeding process failed:\", error);\n      process.exit(1);\n    })\n    .finally(() => {\n      // Close the database connection pool\n      pool.end();\n    });\n}\n\nexport { seedDatabase, sampleApps, sampleTestimonials };","size_bytes":10653},"scripts/backup-db.ts":{"content":"#!/usr/bin/env tsx\n\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\n\nneonConfig.webSocketConstructor = ws;\nimport { apps, testimonials } from '../shared/schema.js';\nimport { writeFile, mkdir } from 'fs/promises';\nimport { dirname } from 'path';\n\ninterface BackupOptions {\n  tables: string[];\n  outputDir: string;\n  databaseUrl?: string;\n}\n\ninterface BackupResult {\n  table: string;\n  file: string;\n  count: number;\n}\n\nasync function createBackup(options: BackupOptions) {\n  const { tables, outputDir, databaseUrl } = options;\n  \n  // Use PROD_DATABASE_URL if available, otherwise fall back to DATABASE_URL\n  const dbUrl = databaseUrl || process.env.PROD_DATABASE_URL || process.env.DATABASE_URL;\n  \n  if (!dbUrl) {\n    console.error('❌ No database URL found. Please set PROD_DATABASE_URL or DATABASE_URL environment variable.');\n    process.exit(1);\n  }\n\n  console.log(`🔌 Connecting to database...`);\n  const pool = new Pool({ connectionString: dbUrl });\n  const db = drizzle({ client: pool, schema: { apps, testimonials } });\n\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n  \n  try {\n    // Ensure output directory exists\n    await mkdir(outputDir, { recursive: true });\n\n    const backupResults: BackupResult[] = [];\n\n    if (tables.includes('apps') || tables.includes('all')) {\n      console.log('📦 Backing up apps table...');\n      const appsData = await db.select().from(apps);\n      const appsFile = `${outputDir}/apps_${timestamp}.json`;\n      await writeFile(appsFile, JSON.stringify(appsData, null, 2));\n      console.log(`✅ Apps backup saved: ${appsFile} (${appsData.length} records)`);\n      backupResults.push({ table: 'apps', file: appsFile, count: appsData.length });\n    }\n\n    if (tables.includes('testimonials') || tables.includes('all')) {\n      console.log('💬 Backing up testimonials table...');\n      const testimonialsData = await db.select().from(testimonials);\n      const testimonialsFile = `${outputDir}/testimonials_${timestamp}.json`;\n      await writeFile(testimonialsFile, JSON.stringify(testimonialsData, null, 2));\n      console.log(`✅ Testimonials backup saved: ${testimonialsFile} (${testimonialsData.length} records)`);\n      backupResults.push({ table: 'testimonials', file: testimonialsFile, count: testimonialsData.length });\n    }\n\n    console.log('\\n🎉 Backup completed successfully!');\n    console.log('📊 Summary:');\n    backupResults.forEach(result => {\n      console.log(`  - ${result.table}: ${result.count} records → ${result.file}`);\n    });\n\n    return backupResults;\n  } catch (error) {\n    console.error('❌ Backup failed:', error);\n    throw error;\n  }\n}\n\n// CLI argument parsing\nfunction parseArgs() {\n  const args = process.argv.slice(2);\n  const options: BackupOptions = {\n    tables: ['all'],\n    outputDir: './backups',\n  };\n\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i];\n    \n    switch (arg) {\n      case '--tables':\n        if (i + 1 < args.length) {\n          options.tables = args[i + 1].split(',').map(t => t.trim());\n          i++;\n        }\n        break;\n      case '--output':\n        if (i + 1 < args.length) {\n          options.outputDir = args[i + 1];\n          i++;\n        }\n        break;\n      case '--db-url':\n        if (i + 1 < args.length) {\n          options.databaseUrl = args[i + 1];\n          i++;\n        }\n        break;\n      case '--help':\n        console.log(`\nDatabase Backup Tool\n\nUsage: tsx scripts/backup-db.ts [options]\n\nOptions:\n  --tables <tables>    Comma-separated list of tables to backup (apps,testimonials,all) [default: all]\n  --output <dir>       Output directory for backup files [default: ./backups]\n  --db-url <url>       Database URL to backup from [default: PROD_DATABASE_URL or DATABASE_URL]\n  --help               Show this help message\n\nExamples:\n  tsx scripts/backup-db.ts\n  tsx scripts/backup-db.ts --tables apps,testimonials --output ./my-backups\n  tsx scripts/backup-db.ts --tables apps --db-url \"postgresql://...\"\n        `);\n        process.exit(0);\n        break;\n    }\n  }\n\n  return options;\n}\n\n// Validate tables\nfunction validateTables(tables: string[]) {\n  const validTables = ['apps', 'testimonials', 'all'];\n  const invalidTables = tables.filter(table => !validTables.includes(table));\n  \n  if (invalidTables.length > 0) {\n    console.error(`❌ Invalid table(s): ${invalidTables.join(', ')}`);\n    console.error(`Valid tables: ${validTables.join(', ')}`);\n    process.exit(1);\n  }\n}\n\n// Main execution\nasync function main() {\n  console.log('🚀 Starting database backup...\\n');\n  \n  const options = parseArgs();\n  validateTables(options.tables);\n  \n  await createBackup(options);\n}\n\n// Export the backup function for use by other scripts\nexport { createBackup };\n\n// Run the script\nif (import.meta.url === new URL('file://' + process.argv[1]).href) {\n  main().catch(error => {\n    console.error('❌ Fatal error:', error);\n    process.exit(1);\n  });\n}","size_bytes":5027},"scripts/cleanup-duplicates.ts":{"content":"#!/usr/bin/env tsx\n\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport { apps, testimonials } from '../shared/schema.js';\nimport { eq, and, ne } from 'drizzle-orm';\nimport { createBackup } from './backup-db.js';\nimport ws from \"ws\";\n\nneonConfig.webSocketConstructor = ws;\n\ninterface CleanupOptions {\n  dryRun: boolean;\n  table: 'apps' | 'testimonials' | 'all';\n  strategy: 'auto' | 'interactive';\n  keepCriteria: 'newest' | 'oldest' | 'most-complete' | 'highest-id';\n  databaseUrl?: string;\n}\n\ninterface DuplicateGroup {\n  name: string;\n  records: any[];\n  keeper?: any;\n  toDelete: any[];\n}\n\ninterface CleanupResult {\n  table: string;\n  duplicateGroups: DuplicateGroup[];\n  totalDuplicates: number;\n  totalDeleted: number;\n  backupFile?: string;\n}\n\ninterface CleanupSummary {\n  totalGroupsProcessed: number;\n  totalRecordsDeleted: number;\n  tableResults: CleanupResult[];\n  hasErrors: boolean;\n  errors: string[];\n}\n\n// Calculate completeness score for a record\nfunction calculateCompletenessScore(record: any, table: 'apps' | 'testimonials'): number {\n  let score = 0;\n  let maxScore = 0;\n\n  if (table === 'apps') {\n    // Essential fields (weight: 2)\n    const essentialFields = ['name', 'description', 'category'];\n    essentialFields.forEach(field => {\n      maxScore += 2;\n      if (record[field] && record[field].toString().trim()) score += 2;\n    });\n\n    // Important fields (weight: 1.5)\n    const importantFields = ['longDescription', 'price', 'imageUrl', 'demoUrl'];\n    importantFields.forEach(field => {\n      maxScore += 1.5;\n      if (record[field] && record[field].toString().trim()) score += 1.5;\n    });\n\n    // Optional fields (weight: 1)\n    const optionalFields = ['githubUrl', 'technologies', 'features'];\n    optionalFields.forEach(field => {\n      maxScore += 1;\n      if (record[field]) {\n        if (Array.isArray(record[field]) && record[field].length > 0) score += 1;\n        else if (record[field] && record[field].toString().trim()) score += 1;\n      }\n    });\n  } else {\n    // Testimonials scoring\n    const essentialFields = ['name', 'content'];\n    essentialFields.forEach(field => {\n      maxScore += 2;\n      if (record[field] && record[field].toString().trim()) score += 2;\n    });\n\n    const importantFields = ['company', 'position', 'rating'];\n    importantFields.forEach(field => {\n      maxScore += 1.5;\n      if (record[field] && record[field].toString().trim()) score += 1.5;\n    });\n\n    const optionalFields = ['avatarUrl'];\n    optionalFields.forEach(field => {\n      maxScore += 1;\n      if (record[field] && record[field].toString().trim()) score += 1;\n    });\n  }\n\n  return maxScore > 0 ? (score / maxScore) * 100 : 0;\n}\n\n// Select the best record from a group of duplicates\nfunction selectBestRecord(records: any[], table: 'apps' | 'testimonials', strategy: string): any {\n  if (records.length <= 1) return records[0];\n\n  switch (strategy) {\n    case 'newest':\n      return records.reduce((best, current) => {\n        const bestDate = new Date(best.createdAt || best.updatedAt || 0);\n        const currentDate = new Date(current.createdAt || current.updatedAt || 0);\n        return currentDate > bestDate ? current : best;\n      });\n\n    case 'oldest':\n      return records.reduce((best, current) => {\n        const bestDate = new Date(best.createdAt || best.updatedAt || Date.now());\n        const currentDate = new Date(current.createdAt || current.updatedAt || Date.now());\n        return currentDate < bestDate ? current : best;\n      });\n\n    case 'highest-id':\n      return records.reduce((best, current) => {\n        return current.id > best.id ? current : best;\n      });\n\n    case 'most-complete':\n    default:\n      // Calculate completeness scores and select the best\n      const scored = records.map(record => ({\n        record,\n        completeness: calculateCompletenessScore(record, table),\n        createdAt: new Date(record.createdAt || 0)\n      }));\n\n      // Sort by completeness (desc), then by creation date (desc) as tiebreaker\n      scored.sort((a, b) => {\n        if (a.completeness !== b.completeness) {\n          return b.completeness - a.completeness;\n        }\n        return b.createdAt.getTime() - a.createdAt.getTime();\n      });\n\n      return scored[0].record;\n  }\n}\n\n// Find duplicate groups in a table\nasync function findDuplicates(db: any, table: 'apps' | 'testimonials'): Promise<DuplicateGroup[]> {\n  console.log(`🔍 Scanning ${table} table for duplicates...`);\n  \n  let allRecords: any[];\n  \n  if (table === 'apps') {\n    allRecords = await db.select().from(apps).where(eq(apps.isActive, true));\n  } else {\n    allRecords = await db.select().from(testimonials).where(eq(testimonials.isActive, true));\n  }\n\n  console.log(`  📊 Found ${allRecords.length} active records`);\n\n  // Group records by name (case-insensitive)\n  const groupedByName = new Map<string, any[]>();\n  \n  allRecords.forEach(record => {\n    const normalizedName = record.name.toLowerCase().trim();\n    if (!groupedByName.has(normalizedName)) {\n      groupedByName.set(normalizedName, []);\n    }\n    groupedByName.get(normalizedName)!.push(record);\n  });\n\n  // Filter to only groups with duplicates\n  const duplicateGroups: DuplicateGroup[] = [];\n  \n  for (const [name, records] of groupedByName.entries()) {\n    if (records.length > 1) {\n      duplicateGroups.push({\n        name: records[0].name, // Use original casing from first record\n        records,\n        toDelete: []\n      });\n    }\n  }\n\n  console.log(`  🔁 Found ${duplicateGroups.length} duplicate groups`);\n  return duplicateGroups;\n}\n\n// Process duplicates for a single table\nasync function processDuplicatesForTable(\n  db: any,\n  table: 'apps' | 'testimonials',\n  options: CleanupOptions\n): Promise<CleanupResult> {\n  console.log(`\\n📋 Processing ${table.toUpperCase()} duplicates`);\n  console.log('═'.repeat(50));\n\n  const result: CleanupResult = {\n    table,\n    duplicateGroups: [],\n    totalDuplicates: 0,\n    totalDeleted: 0\n  };\n\n  try {\n    // Find all duplicate groups\n    const duplicateGroups = await findDuplicates(db, table);\n    result.duplicateGroups = duplicateGroups;\n    \n    if (duplicateGroups.length === 0) {\n      console.log('✅ No duplicates found!');\n      return result;\n    }\n\n    // Process each duplicate group\n    for (const group of duplicateGroups) {\n      console.log(`\\n🔁 Processing duplicate group: \"${group.name}\"`);\n      console.log(`   📊 Found ${group.records.length} duplicates`);\n      \n      // Select the best record to keep\n      group.keeper = selectBestRecord(group.records, table, options.keepCriteria);\n      group.toDelete = group.records.filter(r => r.id !== group.keeper.id);\n      \n      console.log(`   ✅ Keeper: ID ${group.keeper.id} (${options.keepCriteria} strategy)`);\n      console.log(`      📅 Created: ${group.keeper.createdAt}`);\n      if (table === 'apps') {\n        console.log(`      💰 Price: ${group.keeper.price || 'Not set'}`);\n        console.log(`      📝 Description length: ${group.keeper.description?.length || 0} chars`);\n        console.log(`      🖼️  Image: ${group.keeper.imageUrl ? 'Yes' : 'No'}`);\n        console.log(`      🔗 Demo URL: ${group.keeper.demoUrl ? 'Yes' : 'No'}`);\n        console.log(`      ⭐ Premium: ${group.keeper.isPremium ? 'Yes' : 'No'}`);\n        console.log(`      📊 Completeness: ${calculateCompletenessScore(group.keeper, table).toFixed(1)}%`);\n      } else {\n        console.log(`      🏢 Company: ${group.keeper.company || 'Not set'}`);\n        console.log(`      ⭐ Rating: ${group.keeper.rating || 'Not set'}`);\n        console.log(`      📊 Completeness: ${calculateCompletenessScore(group.keeper, table).toFixed(1)}%`);\n      }\n      \n      console.log(`   🗑️  To delete: ${group.toDelete.length} records`);\n      group.toDelete.forEach(record => {\n        console.log(`      - ID ${record.id} (created: ${record.createdAt}, completeness: ${calculateCompletenessScore(record, table).toFixed(1)}%)`);\n      });\n\n      result.totalDuplicates += group.records.length;\n      result.totalDeleted += group.toDelete.length;\n    }\n\n    return result;\n\n  } catch (error) {\n    console.error(`❌ Error processing ${table} duplicates:`, error);\n    throw error;\n  }\n}\n\n// Execute deletions for a table\nasync function executeDeletions(\n  tx: any,\n  table: 'apps' | 'testimonials',\n  duplicateGroups: DuplicateGroup[]\n): Promise<number> {\n  let totalDeleted = 0;\n\n  for (const group of duplicateGroups) {\n    for (const record of group.toDelete) {\n      if (table === 'apps') {\n        await tx.update(apps)\n          .set({ isActive: false, updatedAt: new Date() })\n          .where(eq(apps.id, record.id));\n      } else {\n        await tx.update(testimonials)\n          .set({ isActive: false })\n          .where(eq(testimonials.id, record.id));\n      }\n      totalDeleted++;\n    }\n  }\n\n  return totalDeleted;\n}\n\n// Main cleanup function\nasync function performCleanup(options: CleanupOptions): Promise<CleanupSummary> {\n  const dbUrl = options.databaseUrl || process.env.PROD_DATABASE_URL || process.env.DATABASE_URL;\n  \n  if (!dbUrl) {\n    throw new Error('No database URL found. Please set PROD_DATABASE_URL or DATABASE_URL environment variable.');\n  }\n\n  console.log(`🔌 Connecting to database...`);\n  const pool = new Pool({ connectionString: dbUrl });\n  const db = drizzle({ client: pool, schema: { apps, testimonials } });\n\n  const summary: CleanupSummary = {\n    totalGroupsProcessed: 0,\n    totalRecordsDeleted: 0,\n    tableResults: [],\n    hasErrors: false,\n    errors: []\n  };\n\n  try {\n    console.log(`\\n${options.dryRun ? '🧪 DRY RUN MODE' : '🚀 CLEANUP MODE'}`);\n    console.log(`📋 Strategy: ${options.keepCriteria}`);\n    console.log(`🎯 Table(s): ${options.table}`);\n    \n    if (options.dryRun) {\n      console.log('📝 No changes will be made to the database');\n    }\n\n    // Determine which tables to process\n    const tablesToProcess: ('apps' | 'testimonials')[] = [];\n    if (options.table === 'all') {\n      tablesToProcess.push('apps', 'testimonials');\n    } else {\n      tablesToProcess.push(options.table);\n    }\n\n    // Create backup before cleanup (only if not dry run)\n    if (!options.dryRun) {\n      console.log('\\n💾 Creating backup before cleanup...');\n      try {\n        const backupResults = await createBackup({\n          tables: tablesToProcess.length === 2 ? ['all'] : [tablesToProcess[0]],\n          outputDir: './backups',\n          databaseUrl: dbUrl\n        });\n        \n        if (backupResults.length > 0) {\n          console.log('✅ Backup created successfully');\n          summary.tableResults.forEach((result, index) => {\n            if (backupResults[index]) {\n              result.backupFile = backupResults[index].file;\n            }\n          });\n        }\n      } catch (backupError) {\n        console.error('❌ Backup failed:', backupError);\n        throw new Error('Backup failed - aborting cleanup for safety');\n      }\n    }\n\n    // Process each table\n    for (const table of tablesToProcess) {\n      try {\n        const result = await processDuplicatesForTable(db, table, options);\n        summary.tableResults.push(result);\n        summary.totalGroupsProcessed += result.duplicateGroups.length;\n      } catch (error) {\n        summary.hasErrors = true;\n        summary.errors.push(`Error processing ${table}: ${error}`);\n        console.error(`❌ Error processing ${table}:`, error);\n      }\n    }\n\n    // Execute deletions if not dry run\n    if (!options.dryRun && summary.tableResults.some(r => r.totalDeleted > 0)) {\n      console.log('\\n⚡ Executing cleanup in atomic transaction...');\n      \n      await db.transaction(async (tx) => {\n        for (const result of summary.tableResults) {\n          if (result.duplicateGroups.length > 0) {\n            const deleted = await executeDeletions(tx, result.table as 'apps' | 'testimonials', result.duplicateGroups);\n            summary.totalRecordsDeleted += deleted;\n            console.log(`  ✅ ${result.table}: ${deleted} records deactivated`);\n          }\n        }\n      });\n      \n      console.log('✅ Transaction completed successfully');\n    } else if (options.dryRun) {\n      // Calculate what would be deleted\n      summary.totalRecordsDeleted = summary.tableResults.reduce((total, result) => total + result.totalDeleted, 0);\n    }\n\n    return summary;\n\n  } catch (error) {\n    summary.hasErrors = true;\n    summary.errors.push(`Fatal error: ${error}`);\n    console.error('❌ Cleanup failed:', error);\n    if (!options.dryRun) {\n      console.error('🔄 All changes have been rolled back due to transaction failure');\n    }\n    throw error;\n  }\n}\n\n// CLI argument parsing\nfunction parseArgs(): CleanupOptions {\n  const args = process.argv.slice(2);\n  const options: CleanupOptions = {\n    dryRun: false,\n    table: 'apps',\n    strategy: 'auto',\n    keepCriteria: 'most-complete',\n  };\n\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i];\n    \n    switch (arg) {\n      case '--dry-run':\n        options.dryRun = true;\n        break;\n      case '--table':\n        if (i + 1 < args.length) {\n          const table = args[i + 1] as 'apps' | 'testimonials' | 'all';\n          if (['apps', 'testimonials', 'all'].includes(table)) {\n            options.table = table;\n          } else {\n            console.error(`❌ Invalid table: ${table}. Valid options: apps, testimonials, all`);\n            process.exit(1);\n          }\n          i++;\n        }\n        break;\n      case '--strategy':\n        if (i + 1 < args.length) {\n          const strategy = args[i + 1];\n          if (['auto', 'interactive'].includes(strategy)) {\n            options.strategy = strategy as 'auto' | 'interactive';\n          } else {\n            console.error(`❌ Invalid strategy: ${strategy}. Valid options: auto, interactive`);\n            process.exit(1);\n          }\n          i++;\n        }\n        break;\n      case '--keep':\n        if (i + 1 < args.length) {\n          const criteria = args[i + 1];\n          if (['newest', 'oldest', 'most-complete', 'highest-id'].includes(criteria)) {\n            options.keepCriteria = criteria as any;\n          } else {\n            console.error(`❌ Invalid keep criteria: ${criteria}. Valid options: newest, oldest, most-complete, highest-id`);\n            process.exit(1);\n          }\n          i++;\n        }\n        break;\n      case '--db-url':\n        if (i + 1 < args.length) {\n          options.databaseUrl = args[i + 1];\n          i++;\n        }\n        break;\n      case '--help':\n        console.log(`\nDatabase Duplicate Cleanup Tool\n\nUsage: tsx scripts/cleanup-duplicates.ts [options]\n\nURGENT: Fixes production database duplication issues like the 6 copies of \"Harikoa Kainga\"\n\nOptions:\n  --dry-run              Show planned changes without executing them\n  --table <table>        Table to clean (apps, testimonials, all) [default: apps]\n  --strategy <strategy>  Cleanup strategy (auto, interactive) [default: auto]\n  --keep <criteria>      Which record to keep (newest, oldest, most-complete, highest-id) [default: most-complete]\n  --db-url <url>         Database URL [default: PROD_DATABASE_URL or DATABASE_URL]\n  --help                 Show this help message\n\nKeep Criteria:\n  - newest: Keep the most recently created record\n  - oldest: Keep the oldest record  \n  - most-complete: Keep record with most complete data (recommended)\n  - highest-id: Keep record with highest ID\n\nSafety Features:\n  - Creates backup before any deletions\n  - Uses atomic transactions for all operations\n  - Soft deletes (sets isActive=false) instead of hard deletes\n  - Complete rollback on any error\n  - Detailed reporting of what will be changed\n\nExamples:\n  tsx scripts/cleanup-duplicates.ts --dry-run\n  tsx scripts/cleanup-duplicates.ts --table apps --keep newest\n  tsx scripts/cleanup-duplicates.ts --table all --dry-run\n  tsx scripts/cleanup-duplicates.ts --keep most-complete  # Fix Harikoa Kainga duplicates\n        `);\n        process.exit(0);\n        break;\n    }\n  }\n\n  return options;\n}\n\n// Main execution\nasync function main() {\n  console.log('🚀 Starting duplicate cleanup...\\n');\n  \n  const options = parseArgs();\n  \n  try {\n    const summary = await performCleanup(options);\n    \n    // Print final summary\n    console.log('\\n📊 Cleanup Summary:');\n    console.log('═'.repeat(60));\n    \n    summary.tableResults.forEach(result => {\n      console.log(`\\n📋 ${result.table.toUpperCase()}`);\n      console.log(`  🔁 Duplicate groups found: ${result.duplicateGroups.length}`);\n      console.log(`  📊 Total duplicates: ${result.totalDuplicates}`);\n      console.log(`  🗑️  Records ${options.dryRun ? 'to be' : ''} deleted: ${result.totalDeleted}`);\n      \n      if (result.backupFile) {\n        console.log(`  💾 Backup file: ${result.backupFile}`);\n      }\n    });\n\n    console.log(`\\n🎯 OVERALL TOTALS:`);\n    console.log(`  🔁 Groups processed: ${summary.totalGroupsProcessed}`);\n    console.log(`  🗑️  Records ${options.dryRun ? 'to be' : ''} deleted: ${summary.totalRecordsDeleted}`);\n\n    if (summary.hasErrors) {\n      console.log(`\\n⚠️  ERRORS ENCOUNTERED:`);\n      summary.errors.forEach(error => console.log(`  ❌ ${error}`));\n    }\n\n    if (options.dryRun) {\n      console.log('\\n💡 Run without --dry-run to apply these changes');\n      console.log('💡 Add --table all to clean both apps and testimonials');\n    } else {\n      console.log('\\n🎉 Cleanup completed successfully!');\n      console.log('🌐 The duplicates on your website should now be resolved');\n    }\n\n  } catch (error) {\n    console.error('❌ Fatal error:', error);\n    process.exit(1);\n  }\n}\n\n// Run the script\nif (import.meta.url === new URL('file://' + process.argv[1]).href) {\n  main().catch(error => {\n    console.error('❌ Fatal error:', error);\n    process.exit(1);\n  });\n}","size_bytes":17921},"scripts/sync-db.ts":{"content":"#!/usr/bin/env tsx\n\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport { apps, testimonials } from '../shared/schema.js';\nimport { eq } from 'drizzle-orm';\nimport { createHash } from 'crypto';\nimport { createBackup } from './backup-db.js';\nimport ws from \"ws\";\n\nneonConfig.webSocketConstructor = ws;\n\ninterface SyncOptions {\n  dryRun: boolean;\n  replaceMode: boolean;\n  tables: string[];\n  devDatabaseUrl?: string;\n  prodDatabaseUrl?: string;\n}\n\ninterface SyncResult {\n  table: string;\n  inserted: number;\n  updated: number;\n  deactivated: number;\n  duplicates: string[];\n  changes: Array<{\n    action: 'insert' | 'update' | 'deactivate';\n    record: any;\n    businessKey: string;\n  }>;\n}\n\ninterface SyncSummary {\n  totalInserted: number;\n  totalUpdated: number;\n  totalDeactivated: number;\n  tableResults: SyncResult[];\n  hasDuplicates: boolean;\n}\n\n// Generate content hash for testimonials business key\nfunction generateContentHash(content: string): string {\n  return createHash('sha256').update(content).digest('hex').substring(0, 8);\n}\n\n// Get business key for apps (using name)\nfunction getAppBusinessKey(app: any): string {\n  return app.name;\n}\n\n// Get business key for testimonials (using name + content hash)  \nfunction getTestimonialBusinessKey(testimonial: any): string {\n  const contentHash = generateContentHash(testimonial.content);\n  return `${testimonial.name}-${contentHash}`;\n}\n\n// Preflight check for business key duplicates\nfunction checkBusinessKeyDuplicates(data: any[], table: 'apps' | 'testimonials'): string[] {\n  const businessKeys = new Set<string>();\n  const duplicates: string[] = [];\n\n  data.forEach(record => {\n    const businessKey = table === 'apps' \n      ? getAppBusinessKey(record)\n      : getTestimonialBusinessKey(record);\n    \n    if (businessKeys.has(businessKey)) {\n      duplicates.push(businessKey);\n    } else {\n      businessKeys.add(businessKey);\n    }\n  });\n\n  return duplicates;\n}\n\n// Single atomic sync operation for all tables\nasync function performAtomicSync(\n  devDb: any,\n  prodDb: any,\n  options: SyncOptions\n): Promise<SyncSummary> {\n  console.log('\\n🔄 Starting atomic database sync...');\n  \n  // Determine which tables to sync\n  const tablesToSync = options.tables.includes('all') \n    ? ['apps', 'testimonials'] \n    : options.tables.filter(table => ['apps', 'testimonials'].includes(table));\n\n  if (tablesToSync.length === 0) {\n    throw new Error('No valid tables specified for sync');\n  }\n\n  console.log(`📋 Tables to sync: ${tablesToSync.join(', ')}`);\n\n  const summary: SyncSummary = {\n    totalInserted: 0,\n    totalUpdated: 0,\n    totalDeactivated: 0,\n    tableResults: [],\n    hasDuplicates: false\n  };\n\n  // Preflight checks - load all data and check for duplicates\n  console.log('\\n🔍 Running preflight checks...');\n  const dataCache = new Map();\n  \n  for (const table of tablesToSync) {\n    console.log(`  Checking ${table} table...`);\n    \n    let devData: any[], prodData: any[];\n    \n    if (table === 'apps') {\n      [devData, prodData] = await Promise.all([\n        devDb.select().from(apps),\n        prodDb.select().from(apps)\n      ]);\n    } else {\n      [devData, prodData] = await Promise.all([\n        devDb.select().from(testimonials),\n        prodDb.select().from(testimonials)\n      ]);\n    }\n\n    // Check for business key duplicates in dev data\n    const duplicates = checkBusinessKeyDuplicates(devData, table as 'apps' | 'testimonials');\n    if (duplicates.length > 0) {\n      console.log(`    ❌ Found ${duplicates.length} duplicate business keys: ${duplicates.join(', ')}`);\n      summary.hasDuplicates = true;\n    } else {\n      console.log(`    ✅ No duplicate business keys found`);\n    }\n\n    dataCache.set(table, { devData, prodData, duplicates });\n  }\n\n  // Abort if duplicates found\n  if (summary.hasDuplicates) {\n    throw new Error('Preflight checks failed: Duplicate business keys found. Please resolve duplicates before syncing.');\n  }\n\n  console.log('✅ All preflight checks passed');\n\n  // Single atomic transaction for all tables\n  if (!options.dryRun) {\n    console.log('\\n⚡ Executing atomic transaction...');\n    \n    await prodDb.transaction(async (tx: any) => {\n      // Process tables in order: apps first, then testimonials\n      for (const table of tablesToSync) {\n        const result = await syncSingleTable(tx, dataCache.get(table), table as 'apps' | 'testimonials', options);\n        summary.tableResults.push(result);\n        summary.totalInserted += result.inserted;\n        summary.totalUpdated += result.updated;\n        summary.totalDeactivated += result.deactivated;\n        \n        console.log(`  ✅ ${table}: ${result.inserted} inserted, ${result.updated} updated, ${result.deactivated} deactivated`);\n      }\n    });\n    \n    console.log('✅ Transaction completed successfully');\n    \n  } else {\n    // Dry run mode - simulate changes\n    console.log('\\n🧪 Simulating changes (dry run)...');\n    \n    for (const table of tablesToSync) {\n      const result = await simulateTableSync(dataCache.get(table), table as 'apps' | 'testimonials', options);\n      summary.tableResults.push(result);\n      summary.totalInserted += result.inserted;\n      summary.totalUpdated += result.updated;\n      summary.totalDeactivated += result.deactivated;\n      \n      console.log(`  📝 ${table}: ${result.inserted} would be inserted, ${result.updated} updated, ${result.deactivated} deactivated`);\n    }\n  }\n\n  return summary;\n}\n\n// Sync a single table within an existing transaction\nasync function syncSingleTable(\n  tx: any,\n  cachedData: { devData: any[], prodData: any[], duplicates: string[] },\n  table: 'apps' | 'testimonials',\n  options: SyncOptions\n): Promise<SyncResult> {\n  const { devData, prodData } = cachedData;\n  \n  const result: SyncResult = {\n    table,\n    inserted: 0,\n    updated: 0,\n    deactivated: 0,\n    duplicates: cachedData.duplicates,\n    changes: []\n  };\n\n  // Create maps for efficient lookup\n  const prodMap = new Map();\n  const devMap = new Map();\n\n  // Build production map using business keys\n  prodData.forEach(record => {\n    const businessKey = table === 'apps' \n      ? getAppBusinessKey(record)\n      : getTestimonialBusinessKey(record);\n    prodMap.set(businessKey, record);\n  });\n\n  // Build dev map using business keys  \n  devData.forEach(record => {\n    const businessKey = table === 'apps'\n      ? getAppBusinessKey(record) \n      : getTestimonialBusinessKey(record);\n    devMap.set(businessKey, record);\n  });\n\n  // Process each dev record\n  for (const devRecord of devData) {\n    const businessKey = table === 'apps'\n      ? getAppBusinessKey(devRecord)\n      : getTestimonialBusinessKey(devRecord);\n\n    const prodRecord = prodMap.get(businessKey);\n    \n    if (prodRecord) {\n      // Check if update is needed (simple JSON comparison, excluding id, createdAt, updatedAt)\n      const devClean = { ...devRecord };\n      const prodClean = { ...prodRecord };\n      delete devClean.id;\n      delete devClean.createdAt;\n      delete devClean.updatedAt;\n      delete prodClean.id;\n      delete prodClean.createdAt;\n      delete prodClean.updatedAt;\n\n      if (JSON.stringify(devClean) !== JSON.stringify(prodClean)) {\n        // Update existing record\n        const updateData = { \n          ...devRecord, \n          updatedAt: new Date(),\n          isActive: true // Ensure it's active when updated\n        };\n        delete updateData.id;\n        delete updateData.createdAt;\n\n        if (table === 'apps') {\n          await tx.update(apps).set(updateData).where(eq(apps.id, prodRecord.id));\n        } else {\n          await tx.update(testimonials).set(updateData).where(eq(testimonials.id, prodRecord.id));\n        }\n\n        result.updated++;\n        result.changes.push({\n          action: 'update',\n          record: updateData,\n          businessKey\n        });\n      }\n    } else {\n      // Insert new record\n      const insertData = { ...devRecord };\n      delete insertData.id; // Let database generate new ID\n\n      if (table === 'apps') {\n        await tx.insert(apps).values(insertData);\n      } else {\n        await tx.insert(testimonials).values(insertData);\n      }\n\n      result.inserted++;\n      result.changes.push({\n        action: 'insert', \n        record: insertData,\n        businessKey\n      });\n    }\n  }\n\n  // Handle deleted records (replace mode)\n  if (options.replaceMode) {\n    for (const [businessKey, prodRecord] of prodMap.entries()) {\n      if (!devMap.has(businessKey) && prodRecord.isActive !== false) {\n        // Soft delete by setting isActive = false\n        if (table === 'apps') {\n          await tx.update(apps)\n            .set({ isActive: false, updatedAt: new Date() })\n            .where(eq(apps.id, prodRecord.id));\n        } else {\n          await tx.update(testimonials)\n            .set({ isActive: false })\n            .where(eq(testimonials.id, prodRecord.id));\n        }\n\n        result.deactivated++;\n        result.changes.push({\n          action: 'deactivate',\n          record: prodRecord,\n          businessKey\n        });\n      }\n    }\n  }\n\n  return result;\n}\n\n// Simulate table sync for dry run\nasync function simulateTableSync(\n  cachedData: { devData: any[], prodData: any[], duplicates: string[] },\n  table: 'apps' | 'testimonials',\n  options: SyncOptions\n): Promise<SyncResult> {\n  const { devData, prodData } = cachedData;\n  \n  const result: SyncResult = {\n    table,\n    inserted: 0,\n    updated: 0,\n    deactivated: 0,\n    duplicates: cachedData.duplicates,\n    changes: []\n  };\n\n  // Create maps for efficient lookup\n  const prodMap = new Map();\n  const devMap = new Map();\n\n  // Build production map using business keys\n  prodData.forEach(record => {\n    const businessKey = table === 'apps' \n      ? getAppBusinessKey(record)\n      : getTestimonialBusinessKey(record);\n    prodMap.set(businessKey, record);\n  });\n\n  // Build dev map using business keys  \n  devData.forEach(record => {\n    const businessKey = table === 'apps'\n      ? getAppBusinessKey(record) \n      : getTestimonialBusinessKey(record);\n    devMap.set(businessKey, record);\n  });\n\n  // Simulate processing each dev record\n  for (const devRecord of devData) {\n    const businessKey = table === 'apps'\n      ? getAppBusinessKey(devRecord)\n      : getTestimonialBusinessKey(devRecord);\n\n    const prodRecord = prodMap.get(businessKey);\n    \n    if (prodRecord) {\n      // Check if update needed\n      const devClean = { ...devRecord };\n      const prodClean = { ...prodRecord };\n      delete devClean.id;\n      delete devClean.createdAt; \n      delete devClean.updatedAt;\n      delete prodClean.id;\n      delete prodClean.createdAt;\n      delete prodClean.updatedAt;\n\n      if (JSON.stringify(devClean) !== JSON.stringify(prodClean)) {\n        result.updated++;\n        result.changes.push({\n          action: 'update',\n          record: devRecord,\n          businessKey\n        });\n      }\n    } else {\n      result.inserted++;\n      result.changes.push({\n        action: 'insert',\n        record: devRecord,\n        businessKey\n      });\n    }\n  }\n\n  // Handle deleted records in dry run\n  if (options.replaceMode) {\n    for (const [businessKey, prodRecord] of prodMap.entries()) {\n      if (!devMap.has(businessKey) && prodRecord.isActive !== false) {\n        result.deactivated++;\n        result.changes.push({\n          action: 'deactivate',\n          record: prodRecord,\n          businessKey\n        });\n      }\n    }\n  }\n\n  return result;\n}\n\nasync function performSync(options: SyncOptions) {\n  // Use appropriate database URLs\n  const devUrl = options.devDatabaseUrl || process.env.DEV_DATABASE_URL || process.env.DATABASE_URL;\n  const prodUrl = options.prodDatabaseUrl || process.env.PROD_DATABASE_URL;\n\n  if (!devUrl) {\n    console.error('❌ No development database URL found. Please set DEV_DATABASE_URL or DATABASE_URL environment variable.');\n    process.exit(1);\n  }\n\n  if (!prodUrl) {\n    console.error('❌ No production database URL found. Please set PROD_DATABASE_URL environment variable.');\n    process.exit(1);\n  }\n\n  console.log(`🔌 Connecting to databases...`);\n  console.log(`  📍 Dev: [configured]`);\n  console.log(`  📍 Prod: [configured]`);\n\n  const devPool = new Pool({ connectionString: devUrl });\n  const prodPool = new Pool({ connectionString: prodUrl });\n  const devDb = drizzle({ client: devPool, schema: { apps, testimonials } });\n  const prodDb = drizzle({ client: prodPool, schema: { apps, testimonials } });\n\n  try {\n    console.log(`\\n${options.dryRun ? '🧪 DRY RUN MODE' : '🚀 SYNC MODE'} - ${options.replaceMode ? 'with replace' : 'upsert only'}`);\n    \n    if (options.dryRun) {\n      console.log('📝 No changes will be made to the production database');\n    }\n\n    // Create backup before sync (only if not dry run)\n    if (!options.dryRun) {\n      console.log('\\n💾 Creating backup before sync...');\n      try {\n        await createBackup({\n          tables: options.tables.includes('all') ? ['all'] : options.tables,\n          outputDir: './backups',\n          databaseUrl: prodUrl\n        });\n        console.log('✅ Backup created successfully');\n      } catch (backupError) {\n        console.error('❌ Backup failed:', backupError);\n        throw new Error('Backup failed - aborting sync for safety');\n      }\n    }\n\n    // Perform atomic sync\n    const summary = await performAtomicSync(devDb, prodDb, options);\n\n    // Print summary\n    console.log('\\n📊 Sync Summary:');\n    console.log('═══════════════════════════════════════════════════');\n    \n    summary.tableResults.forEach(result => {\n      console.log(`\\n📋 ${result.table.toUpperCase()}`);\n      console.log(`  ✅ Inserted: ${result.inserted}`);\n      console.log(`  🔄 Updated: ${result.updated}`);\n      console.log(`  ⏸️  Deactivated: ${result.deactivated}`);\n\n      // Show detailed changes if requested\n      if (process.argv.includes('--verbose')) {\n        result.changes.forEach(change => {\n          console.log(`    ${change.action}: ${change.businessKey}`);\n        });\n      }\n    });\n\n    console.log(`\\n🎯 TOTAL CHANGES:`);\n    console.log(`  ✅ ${summary.totalInserted} inserted`);\n    console.log(`  🔄 ${summary.totalUpdated} updated`);  \n    console.log(`  ⏸️  ${summary.totalDeactivated} deactivated`);\n\n    if (options.dryRun) {\n      console.log('\\n💡 Run without --dry-run to apply these changes');\n    } else {\n      console.log('\\n🎉 Sync completed successfully!');\n    }\n\n  } catch (error) {\n    console.error('❌ Sync failed:', error);\n    console.error('🔄 All changes have been rolled back due to transaction failure');\n    process.exit(1);\n  }\n}\n\n// CLI argument parsing\nfunction parseArgs() {\n  const args = process.argv.slice(2);\n  const options: SyncOptions = {\n    dryRun: false,\n    replaceMode: false,\n    tables: ['all'],\n  };\n\n  for (let i = 0; i < args.length; i++) {\n    const arg = args[i];\n    \n    switch (arg) {\n      case '--dry-run':\n        options.dryRun = true;\n        break;\n      case '--replace':\n        options.replaceMode = true;\n        break;\n      case '--tables':\n        if (i + 1 < args.length) {\n          options.tables = args[i + 1].split(',').map(t => t.trim());\n          i++;\n        }\n        break;\n      case '--dev-db-url':\n        if (i + 1 < args.length) {\n          options.devDatabaseUrl = args[i + 1];\n          i++;\n        }\n        break;\n      case '--prod-db-url':\n        if (i + 1 < args.length) {\n          options.prodDatabaseUrl = args[i + 1];\n          i++;\n        }\n        break;\n      case '--help':\n        console.log(`\nDatabase Sync Tool\n\nUsage: tsx scripts/sync-db.ts [options]\n\nOptions:\n  --dry-run              Show planned changes without executing them\n  --replace              Enable soft delete of records not in dev (sets isActive=false)\n  --tables <tables>      Comma-separated list of tables to sync (apps,testimonials,all) [default: all]\n  --dev-db-url <url>     Development database URL [default: DEV_DATABASE_URL or DATABASE_URL]\n  --prod-db-url <url>    Production database URL [default: PROD_DATABASE_URL]\n  --verbose              Show detailed changes in summary\n  --help                 Show this help message\n\nBusiness Keys:\n  - Apps: name field\n  - Testimonials: name + content hash\n\nSafety Features:\n  - Never touches purchases table\n  - Creates backup before sync\n  - Single atomic transaction for all tables\n  - Preflight checks for business key duplicates\n  - Safe upsert strategy (update by business key, insert if new)\n  - Complete rollback on any error\n\nExamples:\n  tsx scripts/sync-db.ts --dry-run\n  tsx scripts/sync-db.ts --replace --verbose\n  tsx scripts/sync-db.ts --tables apps --dry-run\n  tsx scripts/sync-db.ts --tables apps,testimonials --replace\n  tsx scripts/sync-db.ts --dev-db-url \"postgresql://...\" --prod-db-url \"postgresql://...\"\n        `);\n        process.exit(0);\n        break;\n    }\n  }\n\n  return options;\n}\n\n// Validate tables\nfunction validateTables(tables: string[]) {\n  const validTables = ['apps', 'testimonials', 'all'];\n  const invalidTables = tables.filter(table => !validTables.includes(table));\n  \n  if (invalidTables.length > 0) {\n    console.error(`❌ Invalid table(s): ${invalidTables.join(', ')}`);\n    console.error(`Valid tables: ${validTables.join(', ')}`);\n    process.exit(1);\n  }\n}\n\n// Main execution\nasync function main() {\n  console.log('🚀 Starting database synchronization...\\n');\n  \n  const options = parseArgs();\n  validateTables(options.tables);\n  \n  await performSync(options);\n}\n\n// Run the script\nif (import.meta.url === new URL('file://' + process.argv[1]).href) {\n  main().catch(error => {\n    console.error('❌ Fatal error:', error);\n    process.exit(1);\n  });\n}","size_bytes":17864},"scripts/test-transaction-support.ts":{"content":"#!/usr/bin/env tsx\n\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport { apps, testimonials } from '../shared/schema.js';\nimport { eq } from 'drizzle-orm';\nimport ws from \"ws\";\n\nneonConfig.webSocketConstructor = ws;\n\ninterface TestResult {\n  test: string;\n  passed: boolean;\n  error?: string;\n  details?: any;\n}\n\nclass TransactionTester {\n  private db: any;\n  private results: TestResult[] = [];\n\n  constructor(databaseUrl: string) {\n    const pool = new Pool({ connectionString: databaseUrl });\n    this.db = drizzle({ client: pool, schema: { apps, testimonials } });\n  }\n\n  private log(message: string) {\n    console.log(`🧪 ${message}`);\n  }\n\n  private addResult(test: string, passed: boolean, error?: string, details?: any) {\n    this.results.push({ test, passed, error, details });\n    console.log(`${passed ? '✅' : '❌'} ${test}${error ? `: ${error}` : ''}`);\n  }\n\n  async testBasicTransactionSupport(): Promise<void> {\n    this.log('Testing basic transaction support...');\n    \n    try {\n      let transactionExecuted = false;\n      \n      await this.db.transaction(async (tx: any) => {\n        // Simple test operation inside transaction\n        const testResult = await tx.select().from(apps).limit(1);\n        transactionExecuted = true;\n      });\n\n      this.addResult('Basic transaction support', transactionExecuted, undefined, 'Transaction executed successfully');\n    } catch (error) {\n      this.addResult('Basic transaction support', false, (error as Error).message);\n    }\n  }\n\n  async testTransactionRollback(): Promise<void> {\n    this.log('Testing transaction rollback on error...');\n    \n    try {\n      // Get initial count\n      const initialApps = await this.db.select().from(apps);\n      const initialCount = initialApps.length;\n\n      let rollbackWorked = false;\n      \n      try {\n        await this.db.transaction(async (tx: any) => {\n          // Insert a test record\n          await tx.insert(apps).values({\n            name: 'TEST_ROLLBACK_APP',\n            description: 'This should be rolled back',\n            category: 'test',\n            isPremium: false,\n            isActive: true\n          });\n          \n          // Force an error to trigger rollback\n          throw new Error('Intentional error to test rollback');\n        });\n      } catch (error) {\n        // Expected error - now check if rollback worked\n        const finalApps = await this.db.select().from(apps);\n        const finalCount = finalApps.length;\n        \n        // Check that the test record was not actually inserted\n        const testApp = finalApps.find(app => app.name === 'TEST_ROLLBACK_APP');\n        \n        rollbackWorked = (finalCount === initialCount && !testApp);\n      }\n\n      this.addResult('Transaction rollback', rollbackWorked, undefined, \n        rollbackWorked ? 'Rollback worked - test record was not persisted' : 'Rollback failed - test record was persisted');\n        \n    } catch (error) {\n      this.addResult('Transaction rollback', false, (error as Error).message);\n    }\n  }\n\n  async testMultiTableTransactionAtomicity(): Promise<void> {\n    this.log('Testing multi-table transaction atomicity...');\n    \n    try {\n      // Get initial counts\n      const initialApps = await this.db.select().from(apps);\n      const initialTestimonials = await this.db.select().from(testimonials);\n      const initialAppCount = initialApps.length;\n      const initialTestimonialCount = initialTestimonials.length;\n\n      let atomicityWorked = false;\n      \n      try {\n        await this.db.transaction(async (tx: any) => {\n          // Insert to apps table\n          await tx.insert(apps).values({\n            name: 'TEST_ATOMIC_APP',\n            description: 'Test app for atomicity',\n            category: 'test',\n            isPremium: false,\n            isActive: true\n          });\n          \n          // Insert to testimonials table\n          await tx.insert(testimonials).values({\n            name: 'Test User',\n            content: 'Test testimonial for atomicity',\n            rating: '5.0',\n            isActive: true\n          });\n          \n          // Force an error after both inserts\n          throw new Error('Intentional error to test atomicity');\n        });\n      } catch (error) {\n        // Expected error - now check if both operations were rolled back\n        const finalApps = await this.db.select().from(apps);\n        const finalTestimonials = await this.db.select().from(testimonials);\n        \n        const finalAppCount = finalApps.length;\n        const finalTestimonialCount = finalTestimonials.length;\n        \n        const testApp = finalApps.find(app => app.name === 'TEST_ATOMIC_APP');\n        const testTestimonial = finalTestimonials.find(t => t.name === 'Test User');\n        \n        atomicityWorked = (\n          finalAppCount === initialAppCount && \n          finalTestimonialCount === initialTestimonialCount &&\n          !testApp && \n          !testTestimonial\n        );\n      }\n\n      this.addResult('Multi-table transaction atomicity', atomicityWorked, undefined,\n        atomicityWorked ? 'Both table operations were properly rolled back' : 'Some operations were not rolled back');\n        \n    } catch (error) {\n      this.addResult('Multi-table transaction atomicity', false, (error as Error).message);\n    }\n  }\n\n  async testSuccessfulTransaction(): Promise<void> {\n    this.log('Testing successful transaction commit...');\n    \n    try {\n      const testAppName = `TEST_SUCCESS_${Date.now()}`;\n      let commitWorked = false;\n      \n      await this.db.transaction(async (tx: any) => {\n        await tx.insert(apps).values({\n          name: testAppName,\n          description: 'Test app for successful commit',\n          category: 'test',\n          isPremium: false,\n          isActive: true\n        });\n      });\n      \n      // Check if the record was actually committed\n      const insertedApp = await this.db.select().from(apps).where(eq(apps.name, testAppName));\n      commitWorked = insertedApp.length === 1;\n      \n      // Clean up - delete the test record\n      if (commitWorked) {\n        await this.db.delete(apps).where(eq(apps.name, testAppName));\n      }\n\n      this.addResult('Successful transaction commit', commitWorked, undefined,\n        commitWorked ? 'Transaction committed successfully' : 'Transaction was not committed');\n        \n    } catch (error) {\n      this.addResult('Successful transaction commit', false, (error as Error).message);\n    }\n  }\n\n  async testNestedTransactionError(): Promise<void> {\n    this.log('Testing nested transaction error handling...');\n    \n    try {\n      let nestedErrorHandled = false;\n      \n      try {\n        await this.db.transaction(async (tx: any) => {\n          // Try to start another transaction inside (this should work with proper neon-serverless)\n          // But we'll test error propagation\n          await tx.insert(apps).values({\n            name: 'TEST_NESTED',\n            description: 'Test nested transaction',\n            category: 'test',\n            isPremium: false,\n            isActive: true\n          });\n          \n          // Simulate an error deep in the transaction\n          throw new Error('Nested transaction error');\n        });\n      } catch (error) {\n        nestedErrorHandled = true;\n        \n        // Verify the record was not inserted\n        const testRecord = await this.db.select().from(apps).where(eq(apps.name, 'TEST_NESTED'));\n        nestedErrorHandled = nestedErrorHandled && testRecord.length === 0;\n      }\n\n      this.addResult('Nested transaction error handling', nestedErrorHandled, undefined,\n        nestedErrorHandled ? 'Nested errors properly bubble up and cause rollback' : 'Nested error handling failed');\n        \n    } catch (error) {\n      this.addResult('Nested transaction error handling', false, (error as Error).message);\n    }\n  }\n\n  async runAllTests(): Promise<void> {\n    console.log('🚀 Starting transaction support integration tests...\\n');\n    \n    await this.testBasicTransactionSupport();\n    await this.testTransactionRollback();\n    await this.testMultiTableTransactionAtomicity();\n    await this.testSuccessfulTransaction();\n    await this.testNestedTransactionError();\n    \n    this.printSummary();\n  }\n\n  private printSummary(): void {\n    console.log('\\n📊 Test Summary:');\n    console.log('═'.repeat(50));\n    \n    const passed = this.results.filter(r => r.passed).length;\n    const total = this.results.length;\n    const failed = total - passed;\n    \n    this.results.forEach(result => {\n      console.log(`${result.passed ? '✅' : '❌'} ${result.test}`);\n      if (result.details) {\n        console.log(`   ${result.details}`);\n      }\n      if (!result.passed && result.error) {\n        console.log(`   Error: ${result.error}`);\n      }\n    });\n    \n    console.log('\\n🎯 Results:');\n    console.log(`  ✅ Passed: ${passed}/${total}`);\n    console.log(`  ❌ Failed: ${failed}/${total}`);\n    \n    if (failed > 0) {\n      console.log('\\n❌ Some tests failed - transaction support may not be working properly!');\n      console.log('   This indicates critical issues that must be resolved before production use.');\n      process.exit(1);\n    } else {\n      console.log('\\n🎉 All tests passed! Transaction support is working correctly.');\n      console.log('   The database synchronization system is safe for production use.');\n    }\n  }\n}\n\n// CLI execution\nasync function main() {\n  const databaseUrl = process.env.DATABASE_URL;\n  \n  if (!databaseUrl) {\n    console.error('❌ DATABASE_URL environment variable is required');\n    process.exit(1);\n  }\n  \n  const tester = new TransactionTester(databaseUrl);\n  await tester.runAllTests();\n}\n\n// Run the tests\nif (import.meta.url === new URL('file://' + process.argv[1]).href) {\n  main().catch(error => {\n    console.error('❌ Fatal error:', error);\n    process.exit(1);\n  });\n}","size_bytes":9941}},"version":1}